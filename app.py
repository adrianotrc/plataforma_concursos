# app.py

import os
import json
from datetime import datetime, timezone, timedelta
import math
import traceback
import threading
import firebase_admin
from firebase_admin import credentials, firestore, auth as firebase_auth
from dotenv import load_dotenv
from flask import Flask, jsonify, request
from flask_cors import CORS, cross_origin
from openai import OpenAI
import stripe
import resend
import numpy as np
from babel.dates import format_date
import traceback
from firebase_admin import credentials, firestore, auth as firebase_auth


load_dotenv()

# --- Configura√ß√µes Iniciais ---
app = Flask(__name__)
CORS(app, origins=["http://127.0.0.1:5500", "http://127.0.0.1:5501", "http://localhost:5500", "http://localhost:5501", "https://iaprovas.com.br", "https://www.iaprovas.com.br"], supports_credentials=True)

# --- Inicializa√ß√£o dos Servi√ßos ---
try:
    if not firebase_admin._apps:
        cred = credentials.Certificate("serviceAccountKey.json")
        firebase_admin.initialize_app(cred)
    db = firestore.client()
except Exception as e:
    print(f"ERRO CR√çTICO: Falha ao inicializar Firebase: {e}")
    db = None

try:
    openai_api_key = os.getenv("OPENAI_API_KEY")
    client = OpenAI(api_key=openai_api_key)
except Exception as e:
    print(f"ERRO CR√çTICO: Falha ao inicializar OpenAI: {e}")
    client = None

stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
resend.api_key = os.getenv("RESEND_API_KEY")

# --- L√≥gica de Gerenciamento de Limites de Uso ---
PLAN_LIMITS = {
    'trial': {'cronogramas': 5, 'exercicios': 5, 'discursivas': 5, 'correcoes_discursivas': 5, 'dicas': 5, 'flashcards': 5},
    'basico': {'cronogramas': 10, 'exercicios': 10, 'discursivas': 10, 'correcoes_discursivas': 10, 'dicas': 10, 'flashcards': 10},
    'intermediario': {'cronogramas': 15, 'exercicios': 15, 'discursivas': 15, 'correcoes_discursivas': 15, 'dicas': 15, 'flashcards': 15},
    'premium': {'cronogramas': 20, 'exercicios': 20, 'discursivas': 20, 'correcoes_discursivas': 20, 'dicas': 20, 'flashcards': 20},
    'anual': {'cronogramas': 20, 'exercicios': 20, 'discursivas': 20, 'correcoes_discursivas': 20, 'dicas': 20, 'flashcards': 20}
}


def check_usage_and_update(user_id, feature):
    try:
        # Usa hor√°rio de Bras√≠lia (UTC-3) para reset √† meia-noite
        brasilia_tz = timezone(timedelta(hours=-3))
        today_str = datetime.now(brasilia_tz).strftime('%Y-%m-%d')
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()
        if not user_doc.exists: return False, "Usu√°rio n√£o encontrado."
        user_plan = user_doc.to_dict().get('plano', 'trial')
        usage_ref = user_ref.collection('usage').document('total_trial' if user_plan == 'trial' else today_str)
        usage_doc = usage_ref.get()
        limit = PLAN_LIMITS.get(user_plan, {}).get(feature, 0)
        current_usage = usage_doc.to_dict().get(feature, 0) if usage_doc.exists else 0
        if current_usage >= limit:
            return False, f"Limite de {limit} usos para '{feature}' atingido."
        usage_ref.set({feature: firestore.Increment(1)}, merge=True)
        return True, "Uso permitido."
    except Exception as e:
        return False, "Erro ao verificar limites de uso."

# --- Fun√ß√µes de API ---
def call_openai_api(prompt_content, system_message, model="gpt-4o-mini"):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt_content}
            ],
            response_format={"type": "json_object"},
            temperature=0.5,
            timeout=180.0  # Aumentado para 3 minutos
        )
        return json.loads(response.choices[0].message.content)
    except Exception as e:
        print(f"ERRO na chamada da API OpenAI: {e}")
        # Log mais detalhado para debugging
        if hasattr(e, 'response'):
            print(f"Status code: {e.response.status_code}")
            print(f"Response: {e.response.text}")
        raise

def get_embedding(text, model="text-embedding-3-small"):
   """Gera o vetor de embedding para um determinado texto."""
   text = text.replace("\n", " ")
   try:
       response = client.embeddings.create(input=[text], model=model)
       return response.data[0].embedding
   except Exception as e:
       print(f"ERRO ao gerar embedding para a busca: {e}")
       return None

# --- FUN√á√ïES DE PR√â-PROCESSAMENTO MATEM√ÅTICO ---
def preprocessar_estrutura_cronograma(dados_usuario):
    """
    Calcula estrutura matem√°tica perfeita antes de enviar para IA
    """
    disponibilidade = dados_usuario['disponibilidade_semanal_minutos']
    duracao_sessao = dados_usuario['duracao_sessao_minutos']
    
    estrutura_dias = {}
    
    for dia, tempo_total in disponibilidade.items():
        # Calcula quantas sess√µes completas cabem
        sessoes_completas = tempo_total // duracao_sessao
        resto = tempo_total % duracao_sessao
        
        sessoes = []
        # Adiciona sess√µes completas
        for i in range(sessoes_completas):
            sessoes.append({
                'posicao': i + 1,
                'duracao': duracao_sessao
            })
        
        # Adiciona sess√£o de resto se houver
        if resto > 0:
            sessoes.append({
                'posicao': len(sessoes) + 1,
                'duracao': resto
            })
            
        estrutura_dias[dia] = {
            'tempo_total': tempo_total,
            'sessoes_calculadas': sessoes,
            'total_sessoes': len(sessoes)
        }
    
    return estrutura_dias

def extrair_materias_e_topicos(materias):
    """
    Extrai e formata mat√©rias com seus t√≥picos espec√≠ficos (OBRIGAT√ìRIOS) e configura√ß√£o individual
    """
    materias_formatadas = []
    
    for materia in materias:
        if isinstance(materia, dict):
            nome_materia = materia.get('nome', '')
            topicos_especificos = materia.get('topicos', [])
            permitir_complementares = materia.get('permitir_topicos_complementares', True)
            
            if topicos_especificos and len(topicos_especificos) > 0:
                # Mat√©ria COM t√≥picos espec√≠ficos
                orientacao_complementar = "‚úÖ Pode sugerir t√≥picos complementares" if permitir_complementares else "üö´ Use APENAS os t√≥picos especificados - PROIBIDO sugerir outros"
                materias_formatadas.append(f"**{nome_materia}**:\n  üéØ T√ìPICOS OBRIGAT√ìRIOS: {', '.join(topicos_especificos)}\n  üìã T√≥picos complementares: {orientacao_complementar}")
            else:
                # Mat√©ria SEM t√≥picos espec√≠ficos
                if permitir_complementares:
                    materias_formatadas.append(f"**{nome_materia}**: üí° SEJA ESPEC√çFICO E DETALHADO! Use t√≥picos relevantes e espec√≠ficos da mat√©ria. EVITE termos gen√©ricos como 'Fundamentos' ou 'Conceitos B√°sicos'. VARIE os t√≥picos e m√©todos em cada sess√£o.")
                else:
                    # Situa√ß√£o problem√°tica: sem t√≥picos + proibido sugerir = ERRO!
                    materias_formatadas.append(f"**{nome_materia}**: ‚ö†Ô∏è PROBLEMA: Nenhum t√≥pico especificado mas proibido sugerir outros. Use t√≥picos mais b√°sicos e fundamentais.")
        elif isinstance(materia, str):
            materias_formatadas.append(f"**{materia}**: üí° SEJA ESPEC√çFICO! Use t√≥picos relevantes e detalhados da mat√©ria")
    
    return "\n".join(materias_formatadas) if materias_formatadas else "Nenhuma mat√©ria especificada"

def criar_orientacoes_por_fase(fase_concurso):
    """
    Cria orienta√ß√µes espec√≠ficas baseadas na fase de prepara√ß√£o (FASES ATUAIS DO FORMUL√ÅRIO)
    """
    orientacoes = {
        "base_sem_edital_especifico": """
**FASE EXPLORAT√ìRIA - Base Sem Edital Espec√≠fico**
- FOQUE em construir base s√≥lida em todas as mat√©rias fundamentais (70% teoria, 30% exerc√≠cios)
- Use mais "Estudo de Teoria" e "Cria√ß√£o de Mapa Mental" para compreender conceitos
- Priorize amplitude sobre profundidade - explore diferentes mat√©rias
- Use "V√≠deoaulas" e "Leitura de PDFs" para formar base conceitual
- Introduza exerc√≠cios b√°sicos gradualmente para fixa√ß√£o""",
        
        "pre_edital_com_foco": """
**FASE DE PREPARA√á√ÉO DIRECIONADA - Pr√©-Edital com Foco**
- EQUILIBRE teoria direcionada e exerc√≠cios variados (50% teoria, 50% exerc√≠cios)
- Use "Revis√£o com Autoexplica√ß√£o" e "Exerc√≠cios de Fixa√ß√£o" para consolidar
- Aprofunde conhecimentos espec√≠ficos do cargo alvo usando edital anterior
- Intensifique exerc√≠cios nas mat√©rias de maior peso/dificuldade
- Use "Flashcards" para memoriza√ß√£o de pontos-chave""",
        
        "pos_edital_publicado": """
**FASE DE RETA FINAL - P√≥s-Edital Publicado**
- PRIORIZE exerc√≠cios e simulados intensivos (30% teoria, 70% exerc√≠cios)
- Use mais "Resolu√ß√£o de Exerc√≠cios" e "Simulados" para simular condi√ß√µes reais
- Foque APENAS nos t√≥picos espec√≠ficos do edital publicado
- Use "Revis√£o Focada" para revisar pontos identificados como fracos
- Elimine t√≥picos n√£o constantes no edital - seja estrat√©gico"""
    }
    
    return orientacoes.get(fase_concurso, """
**ESTRAT√âGIA PADR√ÉO**
- Use uma abordagem equilibrada entre teoria e exerc√≠cios
- Adapte conforme seu n√≠vel de conhecimento atual
- Priorize consist√™ncia sobre intensidade""")

def validar_topicos_obrigatorios(cronograma_gerado, materias_originais):
    """
    Valida se todos os t√≥picos obrigat√≥rios especificados pelo usu√°rio foram inclu√≠dos
    """
    topicos_obrigatorios = {}
    topicos_encontrados = {}
    
    # Extrai t√≥picos obrigat√≥rios das mat√©rias originais
    for materia in materias_originais:
        if isinstance(materia, dict):
            nome_materia = materia.get('nome', '')
            topicos_especificos = materia.get('topicos', [])
            if topicos_especificos:
                topicos_obrigatorios[nome_materia] = set(topicos_especificos)
                topicos_encontrados[nome_materia] = set()
    
    # Verifica quais t√≥picos foram inclu√≠dos no cronograma
    if 'cronograma_semanal_detalhado' in cronograma_gerado:
        for semana in cronograma_gerado['cronograma_semanal_detalhado']:
            for dia in semana.get('dias_de_estudo', []):
                for atividade in dia.get('atividades', []):
                    materia = atividade.get('materia', '')
                    topico = atividade.get('topico_sugerido', '')
                    
                    if materia in topicos_encontrados:
                        topicos_encontrados[materia].add(topico)
    
    # Verifica quais t√≥picos est√£o faltando
    topicos_faltando = {}
    for materia, obrigatorios in topicos_obrigatorios.items():
        encontrados = topicos_encontrados.get(materia, set())
        faltando = obrigatorios - encontrados
        if faltando:
            topicos_faltando[materia] = list(faltando)
    
    return {
        'validacao_aprovada': len(topicos_faltando) == 0,
        'topicos_faltando': topicos_faltando,
        'resumo': f"Valida√ß√£o: {'‚úÖ Aprovada' if len(topicos_faltando) == 0 else '‚ùå Reprovada'} - {len(topicos_obrigatorios)} mat√©rias com t√≥picos obrigat√≥rios verificadas"
    }

def analisar_distribuicao_materias(materias, estrutura_dias):
    """
    Analisa se precisaremos repetir mat√©rias e sugere estrat√©gia
    """
    # Extrai nomes das mat√©rias
    nomes_materias = []
    for materia in materias:
        if isinstance(materia, dict):
            nomes_materias.append(materia.get('nome', ''))
        elif isinstance(materia, str):
            nomes_materias.append(materia)
    
    total_materias = len(nomes_materias)
    analise_por_dia = {}
    
    for dia, estrutura in estrutura_dias.items():
        total_sessoes = estrutura['total_sessoes']
        
        if total_sessoes <= total_materias:
            # Mat√©rias suficientes, sem repeti√ß√£o necess√°ria
            estrategia = "sem_repeticao"
            materias_sugeridas = nomes_materias[:total_sessoes]
        else:
            # Precisar√° repetir mat√©rias
            estrategia = "repeticao_necessaria"
            # Distribui mat√©rias de forma inteligente
            materias_sugeridas = []
            for i in range(total_sessoes):
                materia_index = i % total_materias
                materias_sugeridas.append(nomes_materias[materia_index])
        
        analise_por_dia[dia] = {
            'estrategia': estrategia,
            'materias_sugeridas': materias_sugeridas,
            'total_sessoes': total_sessoes
        }
    
    return analise_por_dia

def criar_prompt_preenchimento(dados_usuario, estrutura_calculada, analise_materias, numero_de_semanas, tecnicas_preferidas_str):
    """
    Prompt focado em preenchimento, n√£o em c√°lculos
    """
    
    # Processa mat√©rias com t√≥picos espec√≠ficos (OBRIGAT√ìRIOS) - configura√ß√£o individual por mat√©ria
    materias_detalhadas = extrair_materias_e_topicos(dados_usuario.get('materias', []))
    
    prompt = f"""Voc√™ √© um especialista em criar cronogramas de estudo baseado na metodologia do 'Guia Definitivo de Aprova√ß√£o'. 
Sua tarefa √© PREENCHER uma estrutura j√° calculada matematicamente.

### ESTRUTURA PR√â-CALCULADA PARA CADA DIA:
{json.dumps(estrutura_calculada, indent=2, ensure_ascii=False)}

### AN√ÅLISE DE DISTRIBUI√á√ÉO DE MAT√âRIAS:
{json.dumps(analise_materias, indent=2, ensure_ascii=False)}

### DADOS COMPLETOS DO ALUNO:
- Concurso: {dados_usuario.get('concurso_objetivo', 'Concurso P√∫blico')}
- Fase de prepara√ß√£o: {dados_usuario.get('fase_concurso', 'N√£o informado')}
- T√©cnicas preferidas: {dados_usuario.get('tecnicas_preferidas', [])}
- Dura√ß√£o total: {numero_de_semanas} semanas
- Dificuldades espec√≠ficas: {dados_usuario.get('dificuldades_materias', 'Nenhuma informada')}

### MAT√âRIAS E T√ìPICOS ESPEC√çFICOS:
{materias_detalhadas}

### SUA TAREFA - PREENCHER CADA SESS√ÉO:
Para cada sess√£o pr√©-calculada, voc√™ deve atribuir:
1. MAT√âRIA (use as sugeridas na an√°lise)
2. T√ìPICO espec√≠fico (OBRIGAT√ìRIO usar os t√≥picos listados pelo aluno)
3. M√âTODO de estudo adequado √† fase e t√©cnicas preferidas

### REGRAS DE PREENCHIMENTO:
1. ‚úÖ PODE repetir mat√©rias quando necess√°rio (se mais sess√µes que mat√©rias)
2. ‚úÖ PODE usar t√≥picos diferentes da mesma mat√©ria
3. ‚úÖ PODE usar m√©todos diferentes para a mesma mat√©ria
4. ‚ùå EVITE apenas: mesma mat√©ria + mesmo t√≥pico + mesmo m√©todo no mesmo dia
5. üéØ PRIORIZE variedade pedag√≥gica e progress√£o natural
6. üìö DISTRIBUA mat√©rias equilibradamente ao longo das semanas
7. üö® **T√ìPICOS OBRIGAT√ìRIOS**: Use TODOS os t√≥picos espec√≠ficos listados pelo aluno
8. ‚ö†Ô∏è **REGRAS INDIVIDUAIS**: Cada mat√©ria tem sua pr√≥pria regra sobre t√≥picos complementares - respeite rigorosamente
9. üí° **SEJA ESPEC√çFICO**: NUNCA use termos gen√©ricos como "Fundamentos" - sempre use t√≥picos espec√≠ficos
10. üîÑ **VARIE SEMPRE**: Para mat√©rias repetidas, use t√≥picos e m√©todos diferentes
11. üìÖ **FASE DE PREPARA√á√ÉO**: Adapte a intensidade e m√©todos conforme a fase do aluno
{tecnicas_preferidas_str}

### ORIENTA√á√ïES POR FASE DE PREPARA√á√ÉO:
{criar_orientacoes_por_fase(dados_usuario.get('fase_concurso', 'N√£o informado'))}

### M√âTODOS DISPON√çVEIS:
- Estudo de Teoria
- Resolu√ß√£o de Exerc√≠cios  
- Revis√£o com Autoexplica√ß√£o
- Cria√ß√£o de Mapa Mental
- Leitura de Lei Seca

### INSTRU√á√ïES CR√çTICAS PARA CRIATIVIDADE E ESPECIFICIDADE:

**üö® REGRA FUNDAMENTAL: SEJA ESPEC√çFICO, N√ÉO GEN√âRICO**

**‚ùå NUNCA USE (t√≥picos gen√©ricos):**
- "Fundamentos de [mat√©ria]"
- "Conceitos B√°sicos"
- "No√ß√µes Gerais" 
- "Introdu√ß√£o √† [mat√©ria]"

**‚úÖ SEMPRE USE (t√≥picos espec√≠ficos):**
- Para Racioc√≠nio L√≥gico: "L√≥gica Proposicional", "An√°lise Combinat√≥ria", "Sequ√™ncias L√≥gicas"
- Para Portugu√™s: "Concord√¢ncia Verbal", "Reg√™ncia Nominal", "Crase"
- Para Dir. Constitucional: "Direitos Fundamentais", "Poder Executivo", "Controle de Constitucionalidade"
- Para Dir. Administrativo: "Atos Administrativos", "Licita√ß√µes", "Agentes P√∫blicos"

**üîÑ VARIA√á√ÉO OBRIGAT√ìRIA:**
- Se uma mat√©ria aparece m√∫ltiplas vezes, use t√≥picos DIFERENTES
- Se repetir mat√©ria + t√≥pico, use m√©todo DIFERENTE
- Exemplo: "L√≥gica Proposicional" + "Teoria", depois "An√°lise Combinat√≥ria" + "Exerc√≠cios"

**üìö M√âTODOS VARIADOS:**
- Estudo de Teoria
- Resolu√ß√£o de Exerc√≠cios  
- Exerc√≠cios de Fixa√ß√£o
- Revis√£o com Autoexplica√ß√£o
- Cria√ß√£o de Mapa Mental
- Leitura de Lei Seca
- Simulados
- V√≠deoaulas

**üéØ PARA T√ìPICOS OBRIGAT√ìRIOS:**
Se especificado "Artigo 5¬∫" ‚Üí "Artigo 5¬∫ - Direitos e Deveres Individuais"
Se especificado "Concord√¢ncia" ‚Üí "Concord√¢ncia Verbal e Nominal"

### FORMATO DE SA√çDA - ESTRUTURA EXATA:
{{
  "plano_de_estudos": {{
    "concurso_foco": "{dados_usuario.get('concurso_objetivo', 'Concurso P√∫blico')}",
    "resumo_estrategico": "Explica√ß√£o da l√≥gica aplicada no cronograma, incluindo como foram priorizados os t√≥picos espec√≠ficos e adapta√ß√µes para a fase de prepara√ß√£o",
    "cronograma_semanal_detalhado": [
      {{
        "semana_numero": 1,
        "dias_de_estudo": [
          {{
            "dia_semana": "Domingo",
            "atividades": [
              {{
                "materia": "Nome da Mat√©ria",
                "topico_sugerido": "Use t√≥picos priorit√°rios listados pelo aluno quando dispon√≠veis", 
                "tipo_de_estudo": "M√©todo adequado √† fase e t√©cnicas preferidas",
                "duracao_minutos": [dura√ß√£o exata calculada]
              }}
            ]
          }}
        ]
      }}
    ]
  }}
}}

IMPORTANTE: 
- Use EXATAMENTE as dura√ß√µes calculadas na estrutura pr√©-calculada
- N√ÉO FA√áA C√ÅLCULOS matem√°ticos
- PREENCHA {numero_de_semanas} semanas completas
- Use TODOS os dias da estrutura calculada
- Retorne APENAS JSON v√°lido"""
    
    return prompt

def validar_cronograma_matematicamente(plano_gerado, dados_originais):
    """
    Verifica se IA respeitou os c√°lculos matem√°ticos
    """
    erros = []
    disponibilidade_original = dados_originais['disponibilidade_semanal_minutos']
    
    for semana in plano_gerado.get('cronograma_semanal_detalhado', []):
        for dia_estudo in semana.get('dias_de_estudo', []):
            dia_nome = dia_estudo['dia_semana']
            
            if dia_nome not in disponibilidade_original:
                erros.append(f"Dia '{dia_nome}' n√£o estava na disponibilidade original")
                continue
                
            tempo_esperado = disponibilidade_original[dia_nome]
            tempo_calculado = sum(ativ['duracao_minutos'] for ativ in dia_estudo.get('atividades', []))
            
            if tempo_calculado != tempo_esperado:
                erros.append(f"{dia_nome}: Esperado {tempo_esperado}min, calculado {tempo_calculado}min")
    
    return erros

def auto_corrigir_cronograma(plano_gerado, dados_originais):
    """
    Corrige automaticamente problemas matem√°ticos simples
    """
    disponibilidade = dados_originais['disponibilidade_semanal_minutos']
    duracao_sessao = dados_originais['duracao_sessao_minutos']
    
    for semana in plano_gerado.get('cronograma_semanal_detalhado', []):
        for dia_estudo in semana.get('dias_de_estudo', []):
            dia_nome = dia_estudo['dia_semana']
            if dia_nome not in disponibilidade:
                continue
                
            tempo_esperado = disponibilidade[dia_nome]
            atividades = dia_estudo.get('atividades', [])
            
            # Recalcula dura√ß√µes se necess√°rio
            tempo_atual = sum(ativ['duracao_minutos'] for ativ in atividades)
            
            if tempo_atual != tempo_esperado:
                print(f"Auto-corrigindo {dia_nome}: {tempo_atual}min ‚Üí {tempo_esperado}min")
                # Aplica corre√ß√£o autom√°tica
                sessoes_completas = tempo_esperado // duracao_sessao
                resto = tempo_esperado % duracao_sessao
                
                # Ajusta atividades existentes
                for i, atividade in enumerate(atividades):
                    if i < sessoes_completas:
                        atividade['duracao_minutos'] = duracao_sessao
                    elif i == sessoes_completas and resto > 0:
                        atividade['duracao_minutos'] = resto
                
                # Remove atividades extras se houver
                expected_activities = sessoes_completas + (1 if resto > 0 else 0)
                dia_estudo['atividades'] = atividades[:expected_activities]
    
    return plano_gerado

def adicionar_sessao_ids(plano_gerado):
    """
    Adiciona sessaoId √∫nico para cada atividade (compatibilidade com progresso)
    """
    import uuid
    
    for semana in plano_gerado.get('cronograma_semanal_detalhado', []):
        for dia_estudo in semana.get('dias_de_estudo', []):
            for atividade in dia_estudo.get('atividades', []):
                atividade['sessaoId'] = str(uuid.uuid4())
    
    return plano_gerado

# --- Fun√ß√£o de Trabalho em Segundo Plano ---
def processar_plano_em_background(user_id, job_id, dados_usuario):
    print(f"BACKGROUND JOB INICIADO: {job_id} para usu√°rio {user_id}")
    job_ref = db.collection('users').document(user_id).collection('plans').document(job_id)
    
    try:
        # L√≥gica de c√°lculo de semanas (sem altera√ß√µes)
        numero_de_semanas = 4
        # ... (o resto da l√≥gica de data permanece o mesmo) ...
        data_inicio_str = dados_usuario.get('data_inicio')
        data_termino_str = dados_usuario.get('data_termino')
        if data_inicio_str and data_termino_str:
            try:
                data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d')
                data_termino = datetime.strptime(data_termino_str, '%Y-%m-%d')
                if data_termino > data_inicio:
                    diferenca_dias = (data_termino - data_inicio).days
                    numero_de_semanas = math.ceil((diferenca_dias + 1) / 7)
            except ValueError:
                numero_de_semanas = 4
        
        # Processa t√©cnicas preferidas para inclus√£o no prompt
        tecnicas_preferidas_str = ""
        if dados_usuario.get('tecnicas_preferidas') and len(dados_usuario['tecnicas_preferidas']) > 0:
            tecnicas_list = ", ".join(dados_usuario['tecnicas_preferidas'])
            tecnicas_preferidas_str = f"\n6. **T√âCNICAS PREFERIDAS:** O aluno indicou prefer√™ncia pelas seguintes t√©cnicas: {tecnicas_list}. PRIORIZE essas t√©cnicas sempre que poss√≠vel, mas mantenha a variedade pedag√≥gica necess√°ria."
            # Debug tempor√°rio - remover depois
            print(f"DEBUG: T√©cnicas preferidas recebidas: {dados_usuario['tecnicas_preferidas']}")
        else:
            print("DEBUG: Nenhuma t√©cnica preferida foi selecionada ou enviada.")
        
        # --- PROMPT FINAL REFOR√áADO ---
        prompt = (
            "Voc√™ √© um coach especialista em criar planos de estudo para concursos, baseando-se na metodologia do 'Guia Definitivo de Aprova√ß√£o'. "
            "Sua tarefa √© criar um plano de estudos em formato JSON, com base nos dados do aluno e nas regras estritas abaixo.\n\n"
            f"DADOS DO ALUNO:\n{json.dumps(dados_usuario, indent=2)}\n\n"
            "‚ö†Ô∏è **ATEN√á√ÉO CR√çTICA SOBRE MAT√âRIAS E T√ìPICOS:** A lista de mat√©rias em `dados_usuario['materias']` cont√©m as mat√©rias e t√≥picos espec√≠ficos que o aluno quer estudar. VOC√ä DEVE INCLUIR TODAS AS MAT√âRIAS e priorizar os t√≥picos especificados pelo aluno.\n\n"
            "REGRAS DE ESTRUTURA JSON (OBRIGAT√ìRIO):\n"
            "1. A resposta DEVE ser um √∫nico objeto JSON.\n"
            "2. A chave principal deve ser 'plano_de_estudos'.\n"
            "3. O objeto 'plano_de_estudos' DEVE conter as chaves: 'concurso_foco', 'resumo_estrategico', e 'cronograma_semanal_detalhado'.\n"
            "4. 'cronograma_semanal_detalhado' DEVE ser uma LISTA de objetos, um para cada semana do plano.\n"
            "5. Cada objeto de semana DEVE ter 'semana_numero' e uma lista chamada 'dias_de_estudo'.\n"
            "6. Cada objeto em 'dias_de_estudo' DEVE ter 'dia_semana' e uma lista chamada 'atividades'.\n"
            "7. Cada objeto em 'atividades' DEVE ter as chaves 'materia', 'topico_sugerido', 'tipo_de_estudo', e 'duracao_minutos'.\n\n"
            "REGRAS DE CONTE√öDO E L√ìGICA (CR√çTICO SEGUIR TODAS):\n"
            "1. **VARIEDADE DE M√âTODOS (REGRA MAIS IMPORTANTE):** O plano DEVE ser pedagogicamente rico. √â OBRIGAT√ìRIO que voc√™ use uma mistura inteligente dos seguintes m√©todos de estudo: 'Estudo de Teoria', 'Resolu√ß√£o de Exerc√≠cios', 'Revis√£o com Autoexplica√ß√£o', 'Cria√ß√£o de Mapa Mental' e 'Leitura de Lei Seca'. Um plano que usa apenas um ou dois m√©todos √© considerado uma falha. Aplique o m√©todo mais adequado para cada mat√©ria e momento do estudo.\n"
            "2. **DISTRIBUI√á√ÉO DE TEMPO (REGRA CR√çTICA):** Para cada dia da semana, voc√™ DEVE distribuir EXATAMENTE o tempo total informado em `disponibilidade_semanal_minutos`. Por exemplo: se o aluno informou 130 minutos para domingo, voc√™ DEVE criar atividades que somem EXATAMENTE 130 minutos. Cada atividade deve ter a dura√ß√£o especificada em `duracao_sessao_minutos` (ex: 30 min), e a √∫ltima atividade pode ter dura√ß√£o menor para completar o tempo total. NUNCA ultrapasse o tempo total do dia.\n"
            "3. **DIAS E TEMPO DE ESTUDO:** Gere atividades para TODOS os dias da semana informados em `dados_usuario['disponibilidade_semanal_minutos']`. O campo 'dia_semana' na sua resposta deve ser EXATAMENTE igual √† chave recebida. Use 100% do tempo de cada dia, mas NUNCA ultrapasse.\n"
            f"4. **MAT√âRIAS E T√ìPICOS:** O plano DEVE incluir TODAS as mat√©rias listadas pelo aluno em `dados_usuario['materias']`. Para cada mat√©ria, priorize os t√≥picos espec√≠ficos informados pelo aluno. Se uma mat√©ria tem t√≥picos definidos, foque nesses t√≥picos. Se n√£o tem t√≥picos espec√≠ficos, use os t√≥picos mais fundamentais da mat√©ria.\n"
            f"5. **DURA√á√ÉO DO PLANO:** O plano deve ter EXATAMENTE {numero_de_semanas} semanas.\n"
            "6. **RESUMO ESTRAT√âGICO:** Crie um 'resumo_estrategico' curto, explicando a l√≥gica de progress√£o aplicada no plano.\n"
            "7. **N√ÉO REPETI√á√ÉO DE MAT√âRIAS:** NUNCA repita a mesma mat√©ria no mesmo dia. Cada atividade em um dia deve ser de uma mat√©ria diferente."
            f"{tecnicas_preferidas_str}"
        )
        system_message = "Voc√™ √© um assistente que gera planos de estudo em formato JSON, seguindo rigorosamente a estrutura e a l√≥gica pedag√≥gica de progress√£o de estudos solicitada."
        
        resultado_ia = call_openai_api(prompt, system_message)

        if 'plano_de_estudos' not in resultado_ia or 'cronograma_semanal_detalhado' not in resultado_ia['plano_de_estudos']:
            raise ValueError("A resposta da IA n√£o continha a estrutura de cronograma esperada.")

        plano_final = resultado_ia['plano_de_estudos']
        
        # Verifica se todas as mat√©rias foram inclu√≠das
        materias_solicitadas_raw = dados_usuario.get('materias', [])
        materias_solicitadas = set()
        
        # Extrai nomes das mat√©rias da nova estrutura
        for materia_data in materias_solicitadas_raw:
            if isinstance(materia_data, dict):
                materias_solicitadas.add(materia_data.get('nome', ''))
            elif isinstance(materia_data, str):
                materias_solicitadas.add(materia_data)
        
        materias_incluidas = set()
        
        for semana in plano_final.get('cronograma_semanal_detalhado', []):
            for dia in semana.get('dias_de_estudo', []):
                for atividade in dia.get('atividades', []):
                    if atividade.get('materia'):
                        materias_incluidas.add(atividade['materia'])
        
        materias_faltando = materias_solicitadas - materias_incluidas
        if materias_faltando:
            print(f"‚ö†Ô∏è AVISO: Mat√©rias n√£o inclu√≠das no cronograma: {materias_faltando}")
            # Adiciona as mat√©rias faltantes ao resumo estrat√©gico
            if 'resumo_estrategico' in plano_final:
                plano_final['resumo_estrategico'] += f" NOTA: As seguintes mat√©rias foram inclu√≠das em sess√µes adicionais: {', '.join(materias_faltando)}."
        
        plano_final['status'] = 'completed'
        
        # Adiciona os dados originais do usu√°rio que s√£o necess√°rios para as m√©tricas
        plano_final['fase_concurso'] = dados_usuario.get('fase_concurso')
        plano_final['disponibilidade_semanal_minutos'] = dados_usuario.get('disponibilidade_semanal_minutos')
        plano_final['duracao_sessao_minutos'] = dados_usuario.get('duracao_sessao_minutos', 25)

        job_ref.update(plano_final)
        print(f"BACKGROUND JOB CONCLU√çDO: {job_id}")

    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({
            'status': 'failed', 
            'error': str(e)
        })

def processar_plano_em_background_v2(user_id, job_id, dados_usuario):
    """
    Vers√£o melhorada com pr√©-processamento e valida√ß√£o
    """
    print(f"BACKGROUND JOB V2 INICIADO: {job_id} para usu√°rio {user_id}")
    job_ref = db.collection('users').document(user_id).collection('plans').document(job_id)
    
    try:
        # L√≥gica de c√°lculo de semanas (mantida)
        numero_de_semanas = 4
        data_inicio_str = dados_usuario.get('data_inicio')
        data_termino_str = dados_usuario.get('data_termino')
        if data_inicio_str and data_termino_str:
            try:
                data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d')
                data_termino = datetime.strptime(data_termino_str, '%Y-%m-%d')
                if data_termino > data_inicio:
                    diferenca_dias = (data_termino - data_inicio).days
                    numero_de_semanas = math.ceil((diferenca_dias + 1) / 7)
            except ValueError:
                numero_de_semanas = 4
        
        # Processa t√©cnicas preferidas
        tecnicas_preferidas_str = ""
        if dados_usuario.get('tecnicas_preferidas') and len(dados_usuario['tecnicas_preferidas']) > 0:
            tecnicas_list = ", ".join(dados_usuario['tecnicas_preferidas'])
            tecnicas_preferidas_str = f"\n7. **T√âCNICAS PREFERIDAS:** O aluno indicou prefer√™ncia por: {tecnicas_list}. PRIORIZE essas t√©cnicas sempre que poss√≠vel."
        
        # 1. PR√â-PROCESSAMENTO MATEM√ÅTICO
        print(f"Iniciando pr√©-processamento para {len(dados_usuario.get('materias', []))} mat√©rias...")
        estrutura_calculada = preprocessar_estrutura_cronograma(dados_usuario)
        analise_materias = analisar_distribuicao_materias(dados_usuario.get('materias', []), estrutura_calculada)
        
        print(f"Estrutura calculada: {estrutura_calculada}")
        print(f"An√°lise de mat√©rias: {analise_materias}")
        
        # 2. PROMPT FOCADO EM PREENCHIMENTO
        prompt = criar_prompt_preenchimento(dados_usuario, estrutura_calculada, analise_materias, numero_de_semanas, tecnicas_preferidas_str)
        system_message = "Voc√™ preenche estruturas de cronograma pr√©-calculadas com conte√∫do pedag√≥gico inteligente. Retorne apenas JSON v√°lido."
        
        # 3. CHAMADA DA IA
        print("Enviando estrutura pr√©-calculada para IA...")
        resultado_ia = call_openai_api(prompt, system_message)
        
        if 'plano_de_estudos' not in resultado_ia:
            raise ValueError("A resposta da IA n√£o continha a estrutura de plano esperada.")
        
        plano_gerado = resultado_ia['plano_de_estudos']
        
        # 4. VALIDA√á√ÉO MATEM√ÅTICA
        erros = validar_cronograma_matematicamente(plano_gerado, dados_usuario)
        
        # 5. AUTO-CORRE√á√ÉO SE NECESS√ÅRIO
        if erros:
            print(f"‚ö†Ô∏è Erros detectados: {erros}. Aplicando auto-corre√ß√£o...")
            plano_gerado = auto_corrigir_cronograma(plano_gerado, dados_usuario)
            # Valida novamente ap√≥s corre√ß√£o
            erros_pos_correcao = validar_cronograma_matematicamente(plano_gerado, dados_usuario)
            if erros_pos_correcao:
                print(f"‚ö†Ô∏è Erros persistem ap√≥s corre√ß√£o: {erros_pos_correcao}")
            else:
                print("‚úÖ Cronograma corrigido com sucesso!")
        else:
            print("‚úÖ Cronograma gerado corretamente na primeira tentativa!")
        
        # 6. ADICIONA SESSAO IDS PARA COMPATIBILIDADE
        plano_final = adicionar_sessao_ids(plano_gerado)
        
        # 7. VERIFICA√á√ÉO DE MAT√âRIAS (mantida para compatibilidade)
        materias_solicitadas_raw = dados_usuario.get('materias', [])
        materias_solicitadas = set()
        
        for materia_data in materias_solicitadas_raw:
            if isinstance(materia_data, dict):
                materias_solicitadas.add(materia_data.get('nome', ''))
            elif isinstance(materia_data, str):
                materias_solicitadas.add(materia_data)
        
        materias_incluidas = set()
        for semana in plano_final.get('cronograma_semanal_detalhado', []):
            for dia in semana.get('dias_de_estudo', []):
                for atividade in dia.get('atividades', []):
                    if atividade.get('materia'):
                        materias_incluidas.add(atividade['materia'])
        
        materias_faltando = materias_solicitadas - materias_incluidas
        if materias_faltando:
            print(f"‚ö†Ô∏è AVISO: Mat√©rias n√£o inclu√≠das no cronograma: {materias_faltando}")
            if 'resumo_estrategico' in plano_final:
                plano_final['resumo_estrategico'] += f" NOTA: As seguintes mat√©rias precisam ser inclu√≠das em futuras revis√µes: {', '.join(materias_faltando)}."
        
        # 7.5. VALIDA√á√ÉO DE T√ìPICOS OBRIGAT√ìRIOS
        validacao_topicos = validar_topicos_obrigatorios(plano_final, materias_solicitadas_raw)
        print(f"üìã {validacao_topicos['resumo']}")
        
        if not validacao_topicos['validacao_aprovada']:
            print(f"‚ùå T√ìPICOS OBRIGAT√ìRIOS FALTANDO: {validacao_topicos['topicos_faltando']}")
            if 'resumo_estrategico' in plano_final:
                plano_final['resumo_estrategico'] += f" IMPORTANTE: Este cronograma pode precisar de ajustes para incluir todos os t√≥picos obrigat√≥rios especificados pelo usu√°rio."
        
        # 8. PRESERVA CAMPOS ORIGINAIS (COMPATIBILIDADE TOTAL)
        plano_final['status'] = 'completed'
        plano_final['fase_concurso'] = dados_usuario.get('fase_concurso')
        plano_final['disponibilidade_semanal_minutos'] = dados_usuario.get('disponibilidade_semanal_minutos')
        plano_final['duracao_sessao_minutos'] = dados_usuario.get('duracao_sessao_minutos', 25)
        plano_final['tecnicas_preferidas'] = dados_usuario.get('tecnicas_preferidas', [])
        
        # 9. SALVA RESULTADO
        job_ref.update(plano_final)
        print(f"‚úÖ BACKGROUND JOB V2 CONCLU√çDO: {job_id}")
        
    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB V2 {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({
            'status': 'failed',
            'error': str(e)
        })

def processar_refinamento_em_background(user_id, job_id, original_plan, feedback_text, tipo_refinamento):
    """Fun√ß√£o de background para refinar um plano existente com base no feedback."""
    print(f"BACKGROUND JOB (REFINAMENTO) INICIADO: {job_id} para usu√°rio {user_id}")
    job_ref = db.collection('users').document(user_id).collection('plans').document(job_id)

    try:
        # Verifica se o job ainda existe e n√£o foi cancelado
        job_doc = job_ref.get()
        if not job_doc.exists:
            print(f"Job {job_id} n√£o existe mais. Abortando refinamento.")
            return
        
        current_status = job_doc.to_dict().get('status')
        if current_status != 'processing_refinement':
            print(f"Job {job_id} n√£o est√° mais em refinamento (status: {current_status}). Abortando.")
            return

        # Remove campos que n√£o devem ser enviados de volta para a IA
        original_plan.pop('status', None)
        original_plan.pop('jobId', None)
        original_plan.pop('criadoEm', None)

        # Processa t√©cnicas preferidas para o prompt de refinamento
        tecnicas_refinamento_str = ""
        if original_plan.get('tecnicas_preferidas') and len(original_plan['tecnicas_preferidas']) > 0:
            tecnicas_list = ", ".join(original_plan['tecnicas_preferidas'])
            tecnicas_refinamento_str = f"\n\n### T√âCNICAS PREFERIDAS DO ALUNO:\nO aluno indicou prefer√™ncia por: {tecnicas_list}. Mantenha essas prefer√™ncias nos ajustes sempre que poss√≠vel."
        
        # Determina o tipo de refinamento baseado na sele√ß√£o do usu√°rio
        tipo_instrucao = ""
        if tipo_refinamento == "tempo-total":
            tipo_instrucao = "\n### TIPO DE AJUSTE: ALTERA√á√ÉO DE TEMPO TOTAL DOS DIAS\nO usu√°rio selecionou 'Alterar tempo total dos dias'. INTERPRETE o pedido como uma solicita√ß√£o para modificar o tempo total dispon√≠vel para cada dia de estudo. Ajuste `disponibilidade_semanal_minutos` conforme solicitado."
        elif tipo_refinamento == "duracao-sessoes":
            tipo_instrucao = "\n### TIPO DE AJUSTE: ALTERA√á√ÉO DE DURA√á√ÉO DAS SESS√ïES\nO usu√°rio selecionou 'Alterar dura√ß√£o das sess√µes'. INTERPRETE o pedido como uma solicita√ß√£o para modificar APENAS `duracao_sessao_minutos`. \n\nüö® **REGRA CR√çTICA - TEMPO TOTAL INALTERADO**: Voc√™ DEVE manter EXATAMENTE o mesmo tempo total de cada dia conforme `disponibilidade_semanal_minutos`. NUNCA altere o tempo total dos dias.\n\nüìä **EXEMPLO OBRIGAT√ìRIO**: Se o dia tem 120 minutos total e voc√™ muda para ciclos de 25 min:\n- Crie 4 atividades de 25 min + 1 de 20 min = 120 min total\n- NUNCA crie 5 atividades de 25 min = 125 min (ERRO!)\n- NUNCA crie 3 atividades de 25 min = 75 min (ERRO!)\n\nüîÑ **REDISTRIBUI√á√ÉO DE MAT√âRIAS**: Use DIFERENTES mat√©rias do plano original para cada atividade. N√ÉO multiplique a mesma mat√©ria v√°rias vezes."
            tipo_instrucao += "\n\n### ALGORITMO OBRIGAT√ìRIO PARA MUDAN√áA DE DURA√á√ÉO DE SESS√ïES:\n1. ‚úÖ MANTENHA o tempo total de cada dia conforme `disponibilidade_semanal_minutos`\n2. ‚úÖ Ajuste APENAS `duracao_sessao_minutos` para o novo valor\n3. ‚úÖ Calcule quantas sess√µes cabem no tempo total: tempo_total √∑ nova_duracao\n4. ‚úÖ Se sobrar tempo, crie uma sess√£o menor para completar o total\n5. ‚úÖ Use DIFERENTES mat√©rias do plano original para cada sess√£o\n6. ‚úÖ NUNCA ultrapasse o tempo total original do dia\n7. ‚úÖ NUNCA repita a mesma mat√©ria no mesmo dia"
        elif tipo_refinamento == "mover-dias":
            tipo_instrucao = "\n### TIPO DE AJUSTE: MOVER ATIVIDADES ENTRE DIAS\nO usu√°rio selecionou 'Mover atividades entre dias'. INTERPRETE o pedido como uma solicita√ß√£o para transferir atividades de um dia para outro, mantendo dura√ß√£o e m√©todos."
        else:
            tipo_instrucao = "\n### TIPO DE AJUSTE: OUTROS\nO usu√°rio selecionou 'Outros ajustes'. INTERPRETE o pedido conforme descrito no texto."
        
        prompt = f'''Voc√™ √© um coach especialista em otimizar planos de estudo para concursos. Sua tarefa √© ajustar um plano de estudos em formato JSON existente, seguindo fielmente o pedido do aluno.
        
        ### REGRA FUNDAMENTAL SOBRE REDISTRIBUI√á√ÉO DE MAT√âRIAS:
        Quando voc√™ precisar criar m√∫ltiplas atividades em um dia (ex: mudar dura√ß√£o de sess√µes), SEMPRE use mat√©rias diferentes do plano original. NUNCA multiplique a mesma mat√©ria v√°rias vezes. Exemplo: se o plano original tem Direito Constitucional, Portugu√™s, Matem√°tica e voc√™ precisa criar 3 atividades, use uma mat√©ria diferente para cada atividade.
        
        ### INSTRU√á√ïES CR√çTICAS PARA ESPECIFICIDADE (OBRIGAT√ìRIO):
        üö® **SEJA ESPEC√çFICO, N√ÉO GEN√âRICO**: NUNCA use termos como "Fundamentos de [mat√©ria]", "Conceitos B√°sicos", "No√ß√µes Gerais". 
        ‚úÖ **SEMPRE USE**: T√≥picos espec√≠ficos como "L√≥gica Proposicional", "Concord√¢ncia Verbal", "Atos Administrativos".
        üîÑ **VARIA√á√ÉO OBRIGAT√ìRIA**: Se uma mat√©ria aparece m√∫ltiplas vezes, use t√≥picos DIFERENTES. Se repetir mat√©ria + t√≥pico, use m√©todo DIFERENTE.
        üìö **M√âTODOS VARIADOS**: Estudo de Teoria, Resolu√ß√£o de Exerc√≠cios, Exerc√≠cios de Fixa√ß√£o, Revis√£o com Autoexplica√ß√£o, Cria√ß√£o de Mapa Mental, Leitura de Lei Seca, Simulados, V√≠deoaulas.
        
        ### PLANO ORIGINAL (JSON):
        {json.dumps(original_plan, indent=2)}
        
        {tipo_instrucao}
        
        ### PEDIDO DE AJUSTE DO ALUNO:
        """
        {feedback_text}
        """{tecnicas_refinamento_str}

### REGRAS CR√çTICAS (OBRIGAT√ìRIO CUMPRIR TODAS):
1. **DISTRIBUI√á√ÉO DE TEMPO (REGRA CR√çTICA):** Para cada dia da semana, voc√™ DEVE distribuir EXATAMENTE o tempo total informado em `disponibilidade_semanal_minutos`. Por exemplo: se o aluno informou 130 minutos para domingo, voc√™ DEVE criar atividades que somem EXATAMENTE 130 minutos. Cada atividade deve ter a dura√ß√£o especificada em `duracao_sessao_minutos` (ex: 30 min), e a √∫ltima atividade pode ter dura√ß√£o menor para completar o tempo total. NUNCA ultrapasse o tempo total do dia.

2. SE o aluno pedir MUDAN√áA DE TEMPO (ex.: "2 horas aos domingos", "45 minutos nas ter√ßas", "limitar todos os dias a 25 minutos"):
   ‚Ä¢ Reescreva completamente o cronograma aplicando os novos tempos.
   ‚Ä¢ Se o pedido for para "limitar" ou "reduzir" o tempo total dos dias, ajuste `disponibilidade_semanal_minutos` para o novo valor.
   ‚Ä¢ Se o pedido for para mudar a dura√ß√£o das sess√µes, ajuste `duracao_sessao_minutos` para o novo valor.
   ‚Ä¢ Cada atividade deve ter a dura√ß√£o especificada em `duracao_sessao_minutos`.
   ‚Ä¢ Redistribua TODAS as mat√©rias originais nos dias com tempo dispon√≠vel.
   ‚Ä¢ RESPEITE EXATAMENTE o tempo total informado para cada dia.
   ‚Ä¢ Se o tempo total for reduzido, mantenha as mat√©rias mais importantes e remova as menos priorit√°rias.

3. SE o aluno pedir MUDAN√áA DE DURA√á√ÉO DE SESS√ïES (ex.: "mudar ciclos para 25 minutos"):
   ‚Ä¢ Apenas ajuste `duracao_sessao_minutos` para o novo valor.
   ‚Ä¢ üö® **CR√çTICO**: MANTENHA EXATAMENTE o tempo total dos dias conforme `disponibilidade_semanal_minutos`.
   ‚Ä¢ Calcule quantas sess√µes cabem: tempo_total √∑ nova_duracao.
   ‚Ä¢ Se sobrar tempo, crie uma sess√£o menor para completar o total.
   ‚Ä¢ Exemplo: se dia tem 120 min total e voc√™ muda para ciclos de 25 min:
     - Crie 4 atividades de 25 min + 1 de 20 min = 120 min total ‚úÖ
     - NUNCA crie 5 atividades de 25 min = 125 min (ERRO!) ‚ùå
     - NUNCA crie 3 atividades de 25 min = 75 min (ERRO!) ‚ùå
   ‚Ä¢ CR√çTICO: Use DIFERENTES mat√©rias do plano original para cada atividade. N√ÉO multiplique a mesma mat√©ria v√°rias vezes.

4. SE o aluno pedir MUDAN√áA DE DIA (ex.: "mover tudo de segunda para ter√ßa"):
   ‚Ä¢ Copie todas as atividades do(s) dia(s) de origem e cole no(s) novo(s) dia(s).
   ‚Ä¢ Preserve dura√ß√£o, m√©todo e ordem relativa.
   ‚Ä¢ Deixe vazio o dia que ficou sem atividades.

5. SE o aluno pedir outra altera√ß√£o (mudar m√©todo, mat√©ria espec√≠fica, etc.):
   ‚Ä¢ Modifique APENAS as atividades mencionadas.
   ‚Ä¢ Mantenha todo o resto exatamente igual.

6. N√ÉO crie mat√©rias nem atividades extras.
7. N√ÉO altere dias ou tempos n√£o solicitados.
8. Atualize 'resumo_estrategico' adicionando ao final uma linha iniciada por "Ajuste realizado:" explicando a mudan√ßa.
9. SEMPRE considere as t√©cnicas preferidas do aluno ao fazer ajustes nos m√©todos de estudo.
10. N√ÉO REPITA a mesma mat√©ria no mesmo dia. Cada atividade em um dia deve ser de uma mat√©ria diferente.
11. **ESPECIFICIDADE OBRIGAT√ìRIA**: NUNCA use t√≥picos gen√©ricos como "Fundamentos", "Conceitos B√°sicos". SEMPRE use t√≥picos espec√≠ficos e relevantes.
12. **VARIA√á√ÉO DE M√âTODOS**: Use m√©todos diferentes (Teoria, Exerc√≠cios, Revis√£o, Mapas, Lei Seca) para evitar repeti√ß√£o.

Lista oficial de nomes de dias (use exatamente estes): Domingo, Segunda-feira, Ter√ßa-feira, Quarta-feira, Quinta-feira, Sexta-feira, S√°bado.

### EXEMPLOS DE INTERPRETA√á√ÉO:
1. Pedido: "Quero estudar Portugu√™s √†s quartas em vez de ter√ßas"
   ‚Üí Copie TODAS as atividades de Ter√ßa-feira para Quarta-feira, mantenha hor√°rios e m√©todos, deixe Ter√ßa-feira vazia.

2. Pedido: "Limitar todos os dias a 25 minutos"
   ‚Üí Reduza `disponibilidade_semanal_minutos` de cada dia para 25 minutos, ajuste `duracao_sessao_minutos` para 25, mantenha apenas 1 atividade por dia.

3. Pedido: "Mudar ciclos para 25 minutos"
   ‚Üí Apenas ajuste `duracao_sessao_minutos` para 25, mantenha o tempo total dos dias. Ex: se dia tem 120 min total, crie 4 atividades de 25 min + 1 de 20 min = 120 min total. Use mat√©rias diferentes para cada atividade (ex: Direito Constitucional, Portugu√™s, Matem√°tica).

4. Pedido: "Reduzir domingo para 60 minutos"
   ‚Üí Ajuste apenas `disponibilidade_semanal_minutos` do domingo para 60, redistribua as atividades.

### EXEMPLO ESPEC√çFICO DE REDISTRIBUI√á√ÉO:
Plano original: Domingo tem 120 min total, 1 atividade de Direito Constitucional (120 min)
Pedido: "Mudar ciclos para 25 minutos"
Resultado CORRETO: 
- Direito Constitucional (25 min)
- Portugu√™s (25 min) 
- Matem√°tica (25 min)
- Racioc√≠nio L√≥gico (25 min)
- Inform√°tica (20 min)
= 120 min total, 5 mat√©rias diferentes (√∫ltima sess√£o menor para completar)

### FORMATO DE SA√çDA
Retorne UM √öNICO objeto JSON com a chave 'plano_de_estudos'. Nenhum texto fora do JSON.
'''
        system_message = "Voc√™ √© um assistente especializado em ajustar planos de estudo. INTERPRETE CORRETAMENTE os pedidos: 'limitar tempo' = reduzir tempo total dos dias; 'mudar ciclos' = alterar dura√ß√£o das sess√µes; 'mudar dias' = mover atividades entre dias. Quando o usu√°rio pedir mudan√ßas de tempo, reescreva completamente o plano. Quando pedir mudan√ßas espec√≠ficas, modifique apenas o necess√°rio. SEMPRE use t√≥picos espec√≠ficos (evite 'Fundamentos', 'Conceitos B√°sicos'). VARIE m√©todos e t√≥picos para evitar repeti√ß√£o. Sempre retorne JSON v√°lido."

        resultado_ia = call_openai_api(prompt, system_message)

        if 'plano_de_estudos' not in resultado_ia:
            raise ValueError("A resposta da IA n√£o continha a estrutura de plano esperada.")

        plano_refinado = resultado_ia['plano_de_estudos']
        plano_refinado['status'] = 'completed' # Marca como completo novamente
        plano_refinado['criadoEm'] = firestore.SERVER_TIMESTAMP # Atualiza o timestamp
        
        # Preserva os dados originais do usu√°rio que s√£o necess√°rios para as m√©tricas
        plano_refinado['fase_concurso'] = original_plan.get('fase_concurso')
        plano_refinado['disponibilidade_semanal_minutos'] = original_plan.get('disponibilidade_semanal_minutos')
        plano_refinado['duracao_sessao_minutos'] = original_plan.get('duracao_sessao_minutos', 25)
        plano_refinado['tecnicas_preferidas'] = original_plan.get('tecnicas_preferidas', [])

        job_ref.update(plano_refinado)
        print(f"BACKGROUND JOB (REFINAMENTO) CONCLU√çDO: {job_id}")

    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB DE REFINAMENTO {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({'status': 'failed', 'error': str(e)})

@app.route("/refinar-plano-estudos-async", methods=['POST'])
@cross_origin(supports_credentials=True)
def refinar_plano_estudos_async():
    """Rota que inicia o refinamento de um plano de estudos em segundo plano."""
    dados_req = request.json
    user_id = dados_req.get("userId")
    job_id = dados_req.get("jobId")
    original_plan = dados_req.get("originalPlan")
    feedback_text = dados_req.get("feedbackText")
    tipo_refinamento = dados_req.get("tipoRefinamento", "outros")

    if not all([user_id, job_id, original_plan, feedback_text]):
        return jsonify({"erro": "Dados insuficientes para refinar o plano."}), 400

    # Verifica o limite de uso da funcionalidade 'cronogramas'
    is_allowed, message = check_usage_and_update(user_id, 'cronogramas')
    if not is_allowed:
        return jsonify({"error": "limit_exceeded", "message": message}), 429

    job_ref = db.collection('users').document(user_id).collection('plans').document(job_id)

    # Atualiza o status do plano para indicar que est√° sendo refinado
    job_ref.update({'status': 'processing_refinement'})

    # Inicia a thread para o trabalho pesado
    thread = threading.Thread(target=processar_refinamento_em_background, args=(user_id, job_id, original_plan, feedback_text, tipo_refinamento))
    thread.start()

    return jsonify({"status": "processing_refinement", "jobId": job_id}), 202

@app.route("/gerar-plano-estudos", methods=['POST'])
@cross_origin(supports_credentials=True)
def gerar_plano_iniciar_job():
    dados_usuario = request.json
    user_id = dados_usuario.get("userId")

    # --- IN√çCIO DA VERIFICA√á√ÉO DE LIMITE ---
    is_allowed, message = check_usage_and_update(user_id, 'cronogramas')
    if not is_allowed:
        return jsonify({"error": "limit_exceeded", "message": message}), 429
    # --- FIM DA VERIFICA√á√ÉO DE LIMITE ---

    if not user_id:
        return jsonify({"erro_geral": "ID do usu√°rio n√£o fornecido."}), 400

    # --- IN√çCIO DA NOVA SE√á√ÉO DE CORRE√á√ÉO ---
    # Pr√©-processa os dados para a IA, garantindo que os dias da semana est√£o corretos.
    if 'disponibilidade_semanal_minutos' in dados_usuario:
        disponibilidade = dados_usuario['disponibilidade_semanal_minutos']
        # Mapeia o nome recebido do frontend para o nome completo que a IA entende melhor
        mapa_dias = {
            "Segunda": "Segunda-feira",
            "Terca": "Ter√ßa-feira",
            "Quarta": "Quarta-feira",
            "Quinta": "Quinta-feira",
            "Sexta": "Sexta-feira",
            "Sabado": "S√°bado",
            "Domingo": "Domingo"
        }
        # Cria um novo dicion√°rio corrigido
        disponibilidade_corrigida = {mapa_dias.get(k, k): v for k, v in disponibilidade.items()}
        dados_usuario['disponibilidade_semanal_minutos'] = disponibilidade_corrigida
    # --- FIM DA NOVA SE√á√ÉO DE CORRE√á√ÉO ---

    job_ref = db.collection('users').document(user_id).collection('plans').document()
    job_id = job_ref.id

    placeholder_data = {
        'status': 'processing',
        'criadoEm': firestore.SERVER_TIMESTAMP,
        'concurso_foco': dados_usuario.get('concurso_objetivo', 'Plano de Estudos'),
        'data_inicio': dados_usuario.get('data_inicio'),
        'data_termino': dados_usuario.get('data_termino'),
        'jobId': job_id
    }
    job_ref.set(placeholder_data)

    thread = threading.Thread(target=processar_plano_em_background_v2, args=(user_id, job_id, dados_usuario))
    thread.start()

    return jsonify({"status": "processing", "jobId": job_id}), 202


# --- FUN√á√ÉO DE ENVIO DE E-MAIL ---
def enviar_email(para_email, nome_usuario, assunto, conteudo_html, conteudo_texto):
    if not resend.api_key:
        print("LOG DE ERRO: A chave da API do Resend (RESEND_API_KEY) n√£o foi encontrada no ambiente.")
        return False
    
    email_remetente = "Equipe IAprovas <contato@iaprovas.com.br>" 
    params = {
        "from": email_remetente,
        "to": [para_email],
        "subject": assunto,
        "html": conteudo_html,
        "text": conteudo_texto,
    }
    
    print(f"LOG INFO: Preparando para enviar e-mail para '{para_email}' com o assunto '{assunto}'.")

    try:
        response = resend.Emails.send(params)
        # Verifica se a resposta da API cont√©m um ID, indicando sucesso
        if response.get("id"):
            print(f"LOG SUCESSO: Resend aceitou o e-mail para '{para_email}'. ID da tarefa: {response.get('id')}")
            return True
        else:
            # Caso a API responda 200 OK mas sem um ID (cen√°rio inesperado)
            print(f"LOG ERRO: Resposta do Resend para '{para_email}' n√£o continha um ID de sucesso. Resposta: {response}")
            return False
            
    except Exception as e:
        # Imprime a mensagem de erro exata que a biblioteca do Resend est√° nos dando
        print(f"LOG ERRO CR√çTICO: A chamada para a API do Resend falhou para o e-mail '{para_email}'.")
        print(f"MENSAGEM DE ERRO EXATA: {e}")
        traceback.print_exc()
        return False
    
# --- ROTAS DA APLICA√á√ÉO ---

@app.route("/enviar-email-boas-vindas", methods=['POST'])
def enviar_email_boas_vindas():
    print("--- ROTA /enviar-email-boas-vindas INICIADA ---")
    dados = request.get_json()
    email_destinatario = dados.get("email")
    nome_destinatario = dados.get("nome", "estudante")
    
    print(f"Recebido pedido para enviar e-mail para: {email_destinatario}")

    if not email_destinatario:
        print("ERRO: E-mail n√£o fornecido no pedido.")
        return jsonify({"erro": "E-mail do destinat√°rio n√£o fornecido."}), 400

    frontend_url = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")
    assunto = "Bem-vindo(a) ao IAprovas! A√ß√£o necess√°ria para ativar sua conta."
    
    conteudo_html = f"""
    <div style="font-family: sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
        <h1 style="color: #1d4ed8;">Ol√°, {nome_destinatario}!</h1>
        <p>Seja muito bem-vindo(a) √† plataforma <strong>IAprovas</strong>! Sua conta foi criada com sucesso.</p>
        <p style="padding: 12px; background-color: #fffbeb; border-left: 4px solid #f59e0b;">
            <strong>A√ß√£o importante:</strong> Para ativar sua conta e conseguir fazer login, voc√™ receber√° um segundo e-mail com um link de confirma√ß√£o. Por favor, encontre-o na sua caixa de entrada (verifique tamb√©m a pasta de spam) e clique no link para validar seu endere√ßo de e-mail.
        </p>
        <p>Ap√≥s confirmar seu e-mail, voc√™ ter√° acesso total ao seu per√≠odo de teste e poder√°:</p>
        <ul>
            <li>Gerar seu primeiro plano de estudos na √°rea de <a href="{frontend_url}/cronograma.html" style="color: #1d4ed8;">Cronograma</a>.</li>
            <li>Praticar com quest√µes na se√ß√£o de <a href="{frontend_url}/exercicios.html" style="color: #1d4ed8;">Exerc√≠cios</a>.</li>
            <li>Receber conselhos na p√°gina de <a href="{frontend_url}/dicas-estrategicas.html" style="color: #1d4ed8;">Dicas Estrat√©gicas</a>.</li>
        </ul>
        <p>Se tiver qualquer d√∫vida, basta responder a este e-mail.</p>
        <p>Bons estudos!</p>
        <p><strong>Equipe IAprovas</strong></p>
    </div>
    """

    conteudo_texto = f"""
    Ol√°, {nome_destinatario}!

    Seja muito bem-vindo(a) √† plataforma IAprovas! Sua conta foi criada com sucesso.

    A√á√ÉO IMPORTANTE: Para ativar sua conta e conseguir fazer login, voc√™ receber√° um segundo e-mail com um link de confirma√ß√£o. Por favor, encontre-o e clique no link para validar seu endere√ßo de e-mail.

    Ap√≥s a confirma√ß√£o, explore a plataforma!

    Bons estudos!
    Equipe IAprovas
    """
    
    print("Tentando chamar a fun√ß√£o interna 'enviar_email'...")
    sucesso = enviar_email(email_destinatario, nome_destinatario, assunto, conteudo_html, conteudo_texto)

    if sucesso:
        print(f"Sucesso no envio para {email_destinatario}. Retornando status 200.")
        return jsonify({"mensagem": "Solicita√ß√£o de e-mail de boas-vindas processada."}), 200
    else:
        print(f"FALHA no envio para {email_destinatario}. Retornando status 500.")
        return jsonify({"erro": "Falha interna ao tentar enviar o e-mail."}), 500
    
@app.route("/enviar-email-alteracao-senha", methods=['POST'])
@cross_origin(supports_credentials=True)
def enviar_email_alteracao_senha():
    dados = request.get_json()
    email_destinatario = dados.get("email")
    nome_destinatario = dados.get("nome", "estudante")
    if not email_destinatario:
        return jsonify({"erro": "E-mail n√£o fornecido."}), 400

    assunto = "Sua senha na IAprovas foi alterada"
    conteudo_html = f"""
    <div style="font-family: sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
        <h1 style="color: #1d4ed8;">Ol√°, {nome_destinatario}!</h1>
        <p>Este √© um e-mail para confirmar que a sua senha de acesso √† plataforma <strong>IAprovas</strong> foi alterada com sucesso.</p>
        <p>Se voc√™ realizou esta altera√ß√£o, pode ignorar este e-mail.</p>
        <p>Se voc√™ <strong>n√£o</strong> reconhece esta atividade, por favor, redefina sua senha imediatamente e entre em contato com nosso suporte.</p>
        <p>Atenciosamente,<br><strong>Equipe IAprovas</strong></p>
    </div>
    """
    conteudo_texto = f"Ol√°, {nome_destinatario}! Sua senha na IAprovas foi alterada. Se voc√™ n√£o reconhece esta atividade, por favor, redefina sua senha e contate o suporte."

    sucesso = enviar_email(email_destinatario, nome_destinatario, assunto, conteudo_html, conteudo_texto)
    if sucesso:
        return jsonify({"mensagem": "E-mail de altera√ß√£o de senha enviado."}), 200
    else:
        return jsonify({"erro": "Falha ao enviar e-mail."}), 500

@app.route("/enviar-email-alteracao-dados", methods=['POST'])
@cross_origin(supports_credentials=True)
def enviar_email_alteracao_dados():
    dados = request.get_json()
    email_destinatario = dados.get("email")
    nome_destinatario = dados.get("nome", "estudante")
    if not email_destinatario:
        return jsonify({"erro": "E-mail n√£o fornecido."}), 400

    assunto = "Seus dados pessoais foram atualizados na IAprovas"
    conteudo_html = f"""
    <div style="font-family: sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
        <h1 style="color: #1d4ed8;">Ol√°, {nome_destinatario}!</h1>
        <p>Confirmamos que suas informa√ß√µes pessoais foram atualizadas em seu perfil na <strong>IAprovas</strong>.</p>
        <p>Se voc√™ realizou esta altera√ß√£o, est√° tudo certo. Caso n√£o reconhe√ßa esta atividade, por favor, entre em contato com o suporte.</p>
        <p>Atenciosamente,<br><strong>Equipe IAprovas</strong></p>
    </div>
    """
    conteudo_texto = f"Ol√°, {nome_destinatario}! Seus dados pessoais foram atualizados na IAprovas. Se voc√™ n√£o reconhece esta atividade, contate o suporte."

    sucesso = enviar_email(email_destinatario, nome_destinatario, assunto, conteudo_html, conteudo_texto)
    if sucesso:
        return jsonify({"mensagem": "E-mail de altera√ß√£o de dados enviado."}), 200
    else:
        return jsonify({"erro": "Falha ao enviar e-mail."}), 500


@app.route("/")
def ola_mundo():
    return "Backend ConcursoIA Funcionando"


@app.route("/verificar-plano/<user_id>/<job_id>", methods=['GET'])
def verificar_plano_status(user_id, job_id):
    try:
        doc_ref = db.collection('users').document(user_id).collection('plans').document(job_id)
        doc = doc_ref.get()

        if not doc.exists:
            return jsonify({"status": "not_found"}), 404

        data = doc.to_dict()
        status = data.get('status')

        # Verifica se o plano est√° em processamento (incluindo refinamento)
        if status in ['processing', 'processing_refinement']:
            return jsonify({"status": "processing"})
        elif status == 'failed':
            return jsonify({"status": "failed", "error": data.get('error', 'Erro desconhecido')})
        else:
            return jsonify({"status": "completed", "plano": data})

    except Exception as e:
        print(f"Erro ao verificar status do job {job_id}: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# --- L√ìGICA DE GERA√á√ÉO DE EXERC√çCIOS COM RAG ---
def find_similar_questions(materia, topico, tipo_questao, limit=3):
    """
    Busca no Firestore por quest√µes semanticamente similares usando embeddings vetoriais.
    """
    try:
        print(f"DEBUG: Buscando quest√µes para mat√©ria={materia}, t√≥pico={topico}, tipo_questao={tipo_questao}")

        # Cria um texto de busca combinando os inputs do usu√°rio
        search_text = f"{materia}: {topico}"
        query_embedding = get_embedding(search_text)

        if not query_embedding:
            raise ValueError("N√£o foi poss√≠vel gerar o embedding para a busca.")

        # Converte para um array numpy para c√°lculos
        query_vector = np.array(query_embedding)

        # Busca candidatas no Firestore (filtrando por mat√©ria para otimizar)
        docs = db.collection('banco_questoes').where('materia', '==', materia).stream()
        docs_list = list(docs)
        print(f"DEBUG: Total de quest√µes encontradas no Firestore para a mat√©ria '{materia}': {len(docs_list)}")

        similar_questions = []
        for doc in docs_list:
            question_data = doc.to_dict()
            if 'embedding' in question_data and question_data.get('embedding'):
                question_vector = np.array(question_data['embedding'])
                # Calcula a similaridade de cosseno (um valor entre -1 e 1, onde 1 √© mais similar)
                similarity = np.dot(question_vector, query_vector) / (np.linalg.norm(question_vector) * np.linalg.norm(query_vector))
                similar_questions.append((similarity, question_data))
            else:
                print(f"DEBUG: Quest√£o sem embedding ou embedding vazio. ID: {doc.id}")

        # Ordena as quest√µes pela similaridade, da maior para a menor
        similar_questions.sort(key=lambda x: x[0], reverse=True)

        # Pega as 'limit' quest√µes mais similares
        top_questions = [question for similarity, question in similar_questions[:limit]]

        print(f"Busca vetorial encontrou {len(top_questions)} exemplos relevantes.")
        return top_questions

    except Exception as e:
        print(f"ERRO na busca vetorial: {e}. Usando fallback para busca simples.")
        # Fallback para a busca simples caso a busca vetorial falhe
        query_fallback = db.collection('banco_questoes').where('materia', '==', materia).where('tipo_questao', '==', tipo_questao).limit(limit)
        docs_fallback = query_fallback.stream()
        return [doc.to_dict() for doc in docs_fallback]

def processar_exercicios_em_background(user_id, job_id, dados_req):
    print(f"BACKGROUND JOB (EXERC√çCIOS RAG) INICIADO: {job_id}")
    job_ref = db.collection('users').document(user_id).collection('sessoesExercicios').document(job_id)
    
    try:
        materia = dados_req.get('materia')
        topico = dados_req.get('topico')
        quantidade = dados_req.get('quantidade', 5)
        banca = dados_req.get('banca', 'geral')
        tipo_questao = dados_req.get('tipo_questao', 'multipla_escolha')

        exemplos_questoes = find_similar_questions(materia, topico, tipo_questao)
        
        exemplos_simplificados = []
        for ex in exemplos_questoes:
            ex_copy = ex.copy()
            ex_copy.pop('avaliacoes', None); ex_copy.pop('status_revisao', None); ex_copy.pop('criadoEm', None)
            exemplos_simplificados.append(ex_copy)

        exemplos_json_str = json.dumps(exemplos_simplificados, indent=2, ensure_ascii=False)

        # --- PROMPT REFOR√áADO E √Ä PROVA DE FALHAS ---
        
        regras_de_formato_json = ""
        if tipo_questao == 'multipla_escolha':
            regras_de_formato_json = """
        - **Estrutura do Objeto de Quest√£o:** Cada objeto deve conter as chaves: "enunciado", "opcoes", "resposta_correta", "explicacao", e "tipo_questao".
        - **Chave "tipo_questao":** O valor DEVE ser "multipla_escolha".
        - **Chave "opcoes":** O valor DEVE ser uma lista contendo EXATAMENTE 5 (cinco) objetos. Cada objeto deve ter as chaves "letra" (A, B, C, D, E) e "texto".
        """
        else: # Certo ou Errado
            regras_de_formato_json = """
        - **Estrutura do Objeto de Quest√£o:** Cada objeto deve conter as chaves: "enunciado", "opcoes", "resposta_correta", "explicacao", e "tipo_questao".
        - **Chave "tipo_questao":** O valor DEVE ser "certo_errado".
        - **Chave "opcoes":** O valor DEVE ser uma lista VAZIA [].
        - **Chave "resposta_correta":** O valor DEVE ser a string "Certo" ou "Errado".
        """

        prompt = f"""
        Voc√™ √© um assistente especialista em criar quest√µes de concurso, extremamente rigoroso com formatos.

        ### TAREFA PRINCIPAL E INFLEX√çVEL
        Crie {quantidade} quest√µes sobre a mat√©ria '{materia}' e t√≥pico '{topico}'. O formato de TODAS as quest√µes DEVE ser, sem exce√ß√£o, '{tipo_questao}'.
        Para quest√µes de m√∫ltipla escolha, CRIE OBRIGATORIAMENTE 5 ALTERNATIVAS (A, B, C, D, E).

        ### EXEMPLOS DE REFER√äNCIA (APENAS PARA ESTILO, N√ÉO COPIE)
        {exemplos_json_str if exemplos_questoes else "Nenhum exemplo encontrado, use seu conhecimento geral."}

        ### REGRAS DE SA√çDA (SEGUIR RIGOROSAMENTE)
        Sua resposta final DEVE ser um √∫nico objeto JSON, contendo apenas uma chave principal chamada "exercicios", que √© uma lista de objetos.

        #### ESTRUTURA DETALHADA PARA CADA OBJETO NA LISTA "exercicios":
        {regras_de_formato_json}

        ### RESTRI√á√ÉO CR√çTICA
        N√ÉO repita nenhuma das quest√µes dos exemplos de refer√™ncia. Crie quest√µes in√©ditas, mesmo que sejam sobre o mesmo tema. N√ÉO copie enunciados, alternativas ou explica√ß√µes dos exemplos.

        ### VERIFICA√á√ÉO FINAL (OBRIGAT√ìRIO)
        Antes de gerar a resposta, revise seu pr√≥prio trabalho para garantir que 100% das quest√µes de m√∫ltipla escolha geradas possuem exatamente 5 alternativas e que nenhuma quest√£o √© igual ou muito parecida com as dos exemplos de refer√™ncia.
        """
        
        system_message = "Voc√™ √© um assistente que gera conte√∫do JSON e segue regras de formata√ß√£o com precis√£o absoluta."
        
        dados_ia = call_openai_api(prompt, system_message)
        
        exercicios_finais = []
        for exercicio_gerado in dados_ia.get('exercicios', []):
            if exercicio_gerado.get('tipo_questao') != tipo_questao:
                print(f"AVISO: IA gerou um tipo de quest√£o incorreto ({exercicio_gerado.get('tipo_questao')}). Ignorando esta quest√£o.")
                continue

            # Valida√ß√£o extra para o n√∫mero de alternativas
            if tipo_questao == 'multipla_escolha' and len(exercicio_gerado.get('opcoes', [])) != 5:
                print(f"AVISO: IA gerou um n√∫mero incorreto de alternativas ({len(exercicio_gerado.get('opcoes', []))}). Ignorando esta quest√£o.")
                continue

            agora = datetime.now(timezone.utc)
            exercicio_para_banco = {**exercicio_gerado}
            exercicio_para_banco.update({
                'banca': banca, 'materia': materia, 'topico': topico, 'criadoEm': agora,
                'avaliacoes': {'positivas': 0, 'negativas': 0}
            })
            
            doc_ref = db.collection('banco_questoes').document()
            doc_ref.set(exercicio_para_banco)
            
            exercicio_para_usuario = {**exercicio_gerado, 'id': doc_ref.id, 'criadoEm': agora.isoformat()}
            exercicios_finais.append(exercicio_para_usuario)
            
        update_data = {
            'status': 'completed',
            'exercicios': exercicios_finais,
            'resumo': {
                'materia': materia, 'topico': topico, 'total': len(exercicios_finais),
                'criadoEm': firestore.SERVER_TIMESTAMP
            }
        }
        job_ref.update(update_data)
        print(f"BACKGROUND JOB (EXERC√çCIOS RAG) CONCLU√çDO: {job_id}")

    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB DE EXERC√çCIOS {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({'status': 'failed', 'error': str(e)})

@app.route("/avaliar-questao", methods=['POST'])
@cross_origin(supports_credentials=True)
def avaliar_questao():
    """ Rota para receber o feedback (like/dislike) de uma quest√£o. """
    dados = request.get_json()
    question_id = dados.get('questionId')
    evaluation = dados.get('evaluation') # 'positiva' or 'negativa'

    if not all([question_id, evaluation]):
        return jsonify({"error": "Dados insuficientes"}), 400

    try:
        question_ref = db.collection('banco_questoes').document(question_id)
        
        if evaluation == 'positiva':
            question_ref.update({'avaliacoes.positivas': firestore.Increment(1)})
        elif evaluation == 'negativa':
            question_ref.update({'avaliacoes.negativas': firestore.Increment(1)})
        
        return jsonify({"success": True, "message": "Avalia√ß√£o registrada."}), 200
    except Exception as e:
        print(f"Erro ao registrar avalia√ß√£o para a quest√£o {question_id}: {e}")
        return jsonify({"error": "Erro interno ao salvar avalia√ß√£o"}), 500   

# --- IN√çCIO DO NOVO C√ìDIGO PARA EXERC√çCIOS ASS√çNCRONOS ---

@app.route("/gerar-exercicios-async", methods=['POST'])
@cross_origin(supports_credentials=True)
def gerar_exercicios_async():
    dados_req = request.json
    user_id = dados_req.get("userId")
    if not user_id: return jsonify({"erro": "ID do usu√°rio n√£o fornecido."}), 400
    
    # Valida√ß√£o da quantidade de quest√µes
    quantidade = dados_req.get("quantidade", 0)
    if not isinstance(quantidade, int) or quantidade < 1 or quantidade > 20:
        return jsonify({"error": "invalid_quantity", "message": "A quantidade deve ser um n√∫mero entre 1 e 20."}), 400
    
    is_allowed, message = check_usage_and_update(user_id, 'exercicios')
    if not is_allowed: return jsonify({"error": "limit_exceeded", "message": message}), 429
    job_ref = db.collection('users').document(user_id).collection('sessoesExercicios').document()
    job_id = job_ref.id
    placeholder_data = {
        'status': 'processing', 'criadoEm': firestore.SERVER_TIMESTAMP, 'jobId': job_id,
        'resumo': { 'materia': dados_req.get('materia'), 'topico': dados_req.get('topico'),
                    'total': dados_req.get('quantidade'), 'criadoEm': firestore.SERVER_TIMESTAMP }
    }
    job_ref.set(placeholder_data)
    thread = threading.Thread(target=processar_exercicios_em_background, args=(user_id, job_id, dados_req))
    thread.start()
    return jsonify({"status": "processing", "jobId": job_id}), 202


@app.route("/gerar-dica-categoria", methods=['POST'])
@cross_origin(supports_credentials=True) # Adicione o cross_origin para consist√™ncia
def gerar_dica_categoria():
    dados_req = request.json
    user_id = dados_req.get("userId") # Pega o ID do usu√°rio da requisi√ß√£o

    # --- VERIFICA√á√ÉO DE LIMITE ---
    is_allowed, message = check_usage_and_update(user_id, 'dicas')
    if not is_allowed:
        return jsonify({"error": "limit_exceeded", "message": message}), 429
    # --- FIM DA VERIFICA√á√ÉO ---
    
    categoria = dados_req.get("categoria", "geral")
    
    contexto_guia = {
        "gestao_de_tempo": "M√≥dulo 5 (Organize seu hor√°rio) e M√≥dulo 6 (Elabore seu plano)",
        "metodos_de_estudo": "M√≥dulo 7 (Estrat√©gias e materiais) e M√≥dulo 9 (Conhe√ßa as bancas)",
        "motivacao": "M√≥dulo 1 (Eu quero realmente estudar?), M√≥dulo 8 (Antecipe as dificuldades) e M√≥dulo 11 (Aprenda com erros e acertos)",
        "redacao": "M√≥dulo 7, se√ß√£o 7.12 (Elabora√ß√£o de reda√ß√£o)"
    }
    
    contexto_especifico = contexto_guia.get(categoria, "t√≥picos gerais de estudo para concursos")

    try:
        prompt = (
            f"Voc√™ √© um especialista em prepara√ß√£o para concursos. Baseando-se nos conceitos do 'Guia Definitivo de Aprova√ß√£o em Concursos', especificamente do contexto de '{contexto_especifico}', "
            f"gere 3 dicas pr√°ticas e acion√°veis para um concurseiro sobre o tema '{categoria.replace('_', ' ')}'. As dicas devem ser curtas, diretas e √∫teis.\n\n"
            f"FORMATO OBRIGAT√ìRIO: Objeto JSON com uma √∫nica chave: 'dicas_geradas', que √© uma LISTA contendo exatamente 3 strings."
        )
        system_message = "Voc√™ √© um assistente especialista que gera dicas de estudo para concursos, baseadas em uma metodologia espec√≠fica e formatando a sa√≠da estritamente em JSON."
        
        dados = call_openai_api(prompt, system_message)
        return jsonify(dados)
    except Exception as e:
        return jsonify({"erro_geral": str(e)}), 500

@app.route("/gerar-dica-personalizada", methods=['POST'])
@cross_origin(supports_credentials=True)
def gerar_dica_personalizada():
    dados_req = request.json
    user_id = dados_req.get("userId")

    # CORRE√á√ÉO: Verifica o user_id ANTES de chamar o limite
    if not user_id:
        return jsonify({"error": "bad_request", "message": "O ID do usu√°rio n√£o foi fornecido na requisi√ß√£o."}), 400

    # --- VERIFICA√á√ÉO DE LIMITE ---
    is_allowed, message = check_usage_and_update(user_id, 'dicas')
    if not is_allowed:
        # A mensagem de erro agora vem da fun√ß√£o de limite e o status est√° correto
        return jsonify({"error": "limit_exceeded", "message": message}), 429
    # --- FIM DA VERIFICA√á√ÉO ---

    dados_desempenho = dados_req.get("desempenho", [])
    
    if not dados_desempenho:
        return jsonify({"dicas_geradas": ["N√£o h√° dados de desempenho suficientes para gerar uma dica personalizada. Continue praticando!"]})

    try:
        prompt = (
            f"Voc√™ √© um coach especialista em concursos. Um aluno apresentou o seguinte hist√≥rico de desempenho recente (mat√©ria: % de acerto): {json.dumps(dados_desempenho)}. "
            f"Com base nesses dados e na metodologia do 'Guia Definitivo de Aprova√ß√£o em Concursos', siga as seguintes regras ESTRITAS:\n\n"
            f"1. **IDENTIFIQUE O PONTO FRACO:** Analise os dados e identifique a mat√©ria com a MENOR taxa de acerto.\n"
            f"2. **APLIQUE A REGRA DE DESEMPENHO:** Com base na taxa de acerto da mat√©ria mais fraca, gere UMA √öNICA dica acion√°vel seguindo a l√≥gica abaixo:\n"
            f"   - **SE a taxa de acerto for MENOR QUE 60%:** A recomenda√ß√£o DEVE focar em estudo de base. Sugira a√ß√µes como: 'rever a teoria principal do t√≥pico', 'assistir a videoaulas sobre o assunto', 'criar um novo mapa mental ou resumo do zero'.\n"
            f"   - **SE a taxa de acerto estiver ENTRE 60% e 80%:** A recomenda√ß√£o DEVE focar em revis√£o e refor√ßo. Sugira a√ß√µes como: 'revisar seus resumos e mapas mentais existentes', 'refazer os exerc√≠cios que errou sobre este t√≥pico', 'fazer uma bateria de 10 a 15 novas quest√µes'.\n"
            f"   - **SE a taxa de acerto for MAIOR QUE 80%:** A recomenda√ß√£o DEVE ser de manuten√ß√£o e foco em outros pontos. Sugira a√ß√µes como: 'manter a mat√©ria com exerc√≠cios de baixa frequ√™ncia (1 ou 2 vezes na semana)' e 'usar o tempo extra para focar em sua segunda mat√©ria mais fraca'.\n"
            f"3. **N√ÉO INVENTE DETALHES:** A dica deve ser focada na ESTRAT√âGIA DE ESTUDO. N√ÉO invente n√∫meros de m√≥dulo, quantidade de exerc√≠cios ou nomes de bancas. Apenas sugira o TIPO de a√ß√£o a ser tomada.\n\n"
            f"Exemplo de Sa√≠da (para acerto < 60%): 'Seu desempenho em Direito Administrativo est√° mais baixo. Recomendo um refor√ßo na base: dedique um tempo para rever a teoria principal de 'Licita√ß√µes' e tente criar um novo mapa mental para organizar os conceitos.'\n\n"
            f"FORMATO OBRIGAT√ìRIO: Objeto JSON com a chave 'dicas_geradas', que √© uma LISTA contendo UMA √öNICA string com a dica personalizada."
        )
        system_message = "Voc√™ √© um coach de concursos que gera dicas personalizadas e acion√°veis baseadas em dados de desempenho e regras de neg√≥cio espec√≠ficas, formatando a sa√≠da estritamente em JSON."
        
        dados = call_openai_api(prompt, system_message)
        return jsonify(dados)
    except Exception as e:
        return jsonify({"erro_geral": str(e)}), 500
    
# --- IN√çCIO DO NOVO C√ìDIGO PARA DISCURSIVAS ASS√çNCRONAS ---

def processar_enunciado_em_background(user_id, job_id, dados_req):
    """Fun√ß√£o de background para gerar o enunciado da discursiva."""
    print(f"BACKGROUND JOB (ENUNCIADO) INICIADO: {job_id} para usu√°rio {user_id}")
    job_ref = db.collection('users').document(user_id).collection('discursivasCorrigidas').document(job_id)
    try:
        prompt = (
            f"Voc√™ √© um especialista em criar quest√µes para concursos. Com base nos seguintes crit√©rios: {json.dumps(dados_req)}, "
            f"crie um √∫nico e excelente enunciado para uma quest√£o discursiva. O enunciado deve ser claro, objetivo e simular perfeitamente uma quest√£o real da banca especificada (se houver).\n\n"
            f"FORMATO OBRIGAT√ìRIO: Objeto JSON com uma √∫nica chave: 'enunciado', que √© uma string contendo o enunciado."
        )
        system_message = "Voc√™ gera enunciados de quest√µes discursivas para concursos, formatando a sa√≠da em JSON."
        dados = call_openai_api(prompt, system_message)

        update_data = {
            'status': 'enunciado_pronto',
            'enunciado': dados.get('enunciado'),
            'criterios': dados_req # Salva os crit√©rios para uso futuro
        }
        job_ref.update(update_data)
        print(f"BACKGROUND JOB (ENUNCIADO) CONCLU√çDO: {job_id}")
    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB DE ENUNCIADO {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({'status': 'failed', 'error': str(e)})

@app.route("/gerar-enunciado-discursiva-async", methods=['POST'])
@cross_origin(supports_credentials=True)
def gerar_enunciado_discursiva_async():
    """Rota que inicia a gera√ß√£o do enunciado em segundo plano."""
    dados_req = request.json
    user_id = dados_req.get("userId")

    # --- IN√çCIO DA VERIFICA√á√ÉO DE LIMITE ---
    is_allowed, message = check_usage_and_update(user_id, 'discursivas')
    if not is_allowed:
        return jsonify({"error": "limit_exceeded", "message": message}), 429
    # --- FIM DA VERIFICA√á√ÉO DE LIMITE ---


    if not user_id: return jsonify({"erro": "ID do usu√°rio n√£o fornecido."}), 400

    job_ref = db.collection('users').document(user_id).collection('discursivasCorrigidas').document()
    job_id = job_ref.id

    placeholder_data = {
        'status': 'processing_enunciado',
        'criadoEm': firestore.SERVER_TIMESTAMP,
        'jobId': job_id
    }
    job_ref.set(placeholder_data)

    thread = threading.Thread(target=processar_enunciado_em_background, args=(user_id, job_id, dados_req))
    thread.start()
    return jsonify({"status": "processing_enunciado", "jobId": job_id}), 202

def processar_correcao_em_background(user_id, job_id, dados_correcao):
    """Fun√ß√£o de background para corrigir a discursiva com mais rigor e clareza."""
    print(f"BACKGROUND JOB (CORRE√á√ÉO) INICIADO: {job_id} para usu√°rio {user_id}")
    job_ref = db.collection('users').document(user_id).collection('discursivasCorrigidas').document(job_id)
    try:
        # --- PROMPT DE CORRE√á√ÉO FINAL E DETALHADO ---
        prompt = (
            "Voc√™ √© um examinador de concurso extremamente rigoroso e justo. Sua tarefa √© analisar a resposta de um aluno, fornecendo um feedback cr√≠tico e construtivo.\n\n"
            f"### Enunciado da Quest√£o:\n{dados_correcao.get('enunciado')}\n\n"
            f"### Resposta do Aluno:\n{dados_correcao.get('resposta')}\n\n"
            f"### Foco da Corre√ß√£o Solicitado:\n{dados_correcao.get('foco_correcao', 'Avalia√ß√£o geral')}\n\n"
            "REGRAS DA CORRE√á√ÉO (SEGUIR COM M√ÅXIMO RIGOR):\n"
            "1. **Nota Realista:** Atribua uma nota de 0.0 a 10.0 para a reda√ß√£o como um todo.\n"
            "2. **Nota por Crit√©rio:** Para cada um dos 3 crit√©rios abaixo, atribua uma nota individual de 0.0 a 10.0. A nota final deve ser a m√©dia dessas tr√™s notas.\n"
            "3. **Feedback Detalhado:** Para cada crit√©rio, escreva um coment√°rio. Comece com os pontos fortes. Depois, para os pontos fracos, **obrigatoriamente inicie uma nova linha** com a frase 'Pontos a melhorar:' e liste-os.\n"
            "4. **Crit√©rios de An√°lise:**\n"
            "   - **Apresenta√ß√£o e Estrutura Textual:** Avalie clareza, coes√£o e organiza√ß√£o.\n"
            "   - **Desenvolvimento do Tema e Argumenta√ß√£o:** Verifique se a resposta aborda o enunciado e se a argumenta√ß√£o √© bem fundamentada.\n"
            "   - **Dom√≠nio da Modalidade Escrita (Gram√°tica):** Aponte erros de gram√°tica, ortografia e pontua√ß√£o.\n"
            "5. **Uso de Destaques:** Use a tag `<strong>` para destacar termos importantes no seu feedback.\n\n"
            "ESTRUTURA DE RESPOSTA JSON (SEGUIR RIGOROSAMENTE):\n"
            "O JSON deve conter 'nota_atribuida' (float), 'comentario_geral' (string), e 'analise_por_criterio' (LISTA de objetos, onde cada objeto DEVE ter 'criterio', 'nota_criterio' e 'comentario')."
        )
        system_message = "Voc√™ √© um examinador de concursos que fornece corre√ß√µes rigorosas e detalhadas, formatando a sa√≠da estritamente em JSON."
        dados = call_openai_api(prompt, system_message)
        
        update_data = {
            'status': 'correcao_pronta',
            'correcao': dados
        }
        job_ref.update(update_data)
        print(f"BACKGROUND JOB (CORRE√á√ÉO) CONCLU√çDO: {job_id}")
    except Exception as e:
        print(f"!!! ERRO NO BACKGROUND JOB DE CORRE√á√ÉO {job_id}: {e} !!!")
        traceback.print_exc()
        job_ref.update({'status': 'failed', 'error': str(e)})

@app.route("/corrigir-discursiva-async", methods=['POST'])
@cross_origin(supports_credentials=True)
def corrigir_discursiva_async():
    """Rota que inicia a corre√ß√£o da discursiva em segundo plano."""
    dados_req = request.json
    user_id = dados_req.get("userId")
    job_id = dados_req.get("jobId") # Recebe o ID do job existente

    # --- IN√çCIO DA VERIFICA√á√ÉO DE LIMITE ---
    is_allowed, message = check_usage_and_update(user_id, 'correcoes_discursivas')
    if not is_allowed:
        return jsonify({"error": "limit_exceeded", "message": message}), 429
    # --- FIM DA VERIFICA√á√ÉO DE LIMITE ---


    if not all([user_id, job_id]): return jsonify({"erro": "Dados insuficientes."}), 400

    job_ref = db.collection('users').document(user_id).collection('discursivasCorrigidas').document(job_id)
    # Atualiza a resposta do usu√°rio e o status para 'processing_correcao'
    job_ref.update({
        'status': 'processing_correcao',
        'resposta': dados_req.get('resposta')
    })

    thread = threading.Thread(target=processar_correcao_em_background, args=(user_id, job_id, dados_req))
    thread.start()
    return jsonify({"status": "processing_correcao", "jobId": job_id}), 202

# --- FIM DO NOVO C√ìDIGO ---
    
@app.route("/create-checkout-session", methods=['POST'])
def create_checkout_session():
    print("\n--- Requisi√ß√£o recebida em /create-checkout-session ---")
    try:
        data = request.get_json()
        plan = data.get('plan')
        userId = data.get('userId')
        print(f"Plano recebido: {plan}, ID do Usu√°rio: {userId}")

        # IDs dos produtos de produ√ß√£o no Stripe
        price_ids = {
            'basico': 'price_1Rw2qDI6qNljWf7uvyv6bAU3',
            'intermediario': 'price_1Rw2qnI6qNljWf7ux393MN2y',
            'premium': 'price_1Rw2rDI6qNljWf7uWnPUO5Nj',
            'anual': 'price_1Rw2rpI6qNljWf7uLqUuOjKb',
        }

        # price_ids = {
        #     'basico': 'price_1RbARyI6qNljWf7uGw17462K',
        #     'intermediario': 'price_1RbAoGI6qNljWf7ukTkebZgt',
        #     'premium': 'price_1RbAoWI6qNljWf7uMd3PI1bh',
        #     'anual': 'price_1RbAokI6qNljWf7uFlJ9UusN',
        # }

        price_id = price_ids.get(plan)
        if not price_id:
            return jsonify(error={'message': 'Plano inv√°lido.'}), 400
        
        if not userId:
            return jsonify(error={'message': 'ID do usu√°rio n√£o fornecido.'}), 400

        YOUR_DOMAIN = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")

        session_params = {
            'payment_method_types': ['card'],
            'line_items': [{'price': price_id, 'quantity': 1}],
            'mode': 'subscription',
            'success_url': YOUR_DOMAIN + '/sucesso.html',
            'cancel_url': YOUR_DOMAIN + '/cancelado.html',
            'client_reference_id': userId
        }
        
        checkout_session = stripe.checkout.Session.create(**session_params)

        print(f"Sess√£o de checkout criada com sucesso! ID: {checkout_session.id}")
        return jsonify({'id': checkout_session.id})

    except Exception as e:
        print(f"\n!!! OCORREU UM ERRO DENTRO DA ROTA /create-checkout-session !!!\n{traceback.format_exc()}")
        return jsonify(error={"message": "Ocorreu um erro interno no servidor."}), 500
    
@app.route("/test-cors", methods=['POST'])
def test_cors_route():
    print("A rota /test-cors foi chamada com sucesso!")
    return jsonify(message="Teste de CORS bem-sucedido!")

@app.route('/stripe-webhook', methods=['POST'])
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get('Stripe-Signature')
    endpoint_secret = os.getenv('STRIPE_WEBHOOK_SECRET')
    event = None

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except (ValueError, stripe.error.SignatureVerificationError) as e:
        print(f"Erro no webhook: {e}")
        return 'Webhook Error', 400

    # --- L√ìGICA DE CADA EVENTO ---

    # EVENTO: COMPRA BEM-SUCEDIDA
    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        user_id = session.get('client_reference_id')
        stripe_customer_id = session.get('customer')
        subscription_id = session.get('subscription')

        if not all([user_id, stripe_customer_id, subscription_id]):
            return 'Webhook Error: Missing data', 400

        try:
            subscription = stripe.Subscription.retrieve(subscription_id)
            price_id = subscription['items']['data'][0]['price']['id']

            # Passo 2: Mapear o ID do pre√ßo de volta para o nome do plano
            # ATEN√á√ÉO: Use os mesmos IDs de PRE√áO de TESTE que voc√™ j√° configurou na rota /create-checkout-session
            price_ids_reverso = {
                'price_1Rw2qDI6qNljWf7uvyv6bAU3': 'basico',
                'price_1Rw2qnI6qNljWf7ux393MN2y': 'intermediario',
                'price_1Rw2rDI6qNljWf7uWnPUO5Nj': 'premium',
                'price_1Rw2rpI6qNljWf7uLqUuOjKb': 'anual',
            }
            
            # price_ids_reverso = {
            #     'price_1RbARyI6qNljWf7uGw17462K': 'basico',
            #     'price_1RbAoGI6qNljWf7ukTkebZgt': 'intermediario',
            #     'price_1RbAoWI6qNljWf7uMd3PI1bh': 'premium',
            #     'price_1RbAokI6qNljWf7uFlJ9UusN': 'anual',
            # }
            plano_comprado = price_ids_reverso.get(price_id, 'premium')
            user_ref = db.collection('users').document(user_id)
            user_doc = user_ref.get()

            if user_doc.exists:
                user_data = user_doc.to_dict()
                user_email = user_data.get('email')
                user_nome = user_data.get('nome', 'estudante')

                user_ref.update({
                    'plano': plano_comprado, 'stripeCustomerId': stripe_customer_id,
                    'stripeSubscriptionId': subscription_id, 'assinaturaStatus': 'ativa',
                    'trialFim': firestore.DELETE_FIELD
                })
                print(f"SUCESSO: Usu√°rio {user_id} assinou o plano '{plano_comprado}'.")

                funcionalidades = {
                    'basico': ["Cronogramas com IA (10 por dia)", "Dicas Estrat√©gicas (10 por dia)"],
                    'intermediario': ["Cronogramas (15 por dia)", "Dicas (15 por dia)", "Exerc√≠cios com IA (15 por dia)"],
                    'premium': ["Cronogramas (20 por dia)", "Exerc√≠cios (20 por dia)", "Quest√µes Discursivas (20 por dia)"],
                    'anual': ["Todas as funcionalidades com limites do plano Premium"]
                }
                lista_html_funcionalidades = "".join([f'<li style="margin-bottom: 8px;">‚úÖ {feat}</li>' for feat in funcionalidades.get(plano_comprado, [])])
                assunto = f"üéâ Assinatura Confirmada - Bem-vindo ao IAprovas {plano_comprado.capitalize()}!"
                frontend_url = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")
                
                # Template de e-mail de confirma√ß√£o
                conteudo_html = f"""
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;">
                    <div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;"><h1 style="color: white; margin: 0; font-size: 24px; font-weight: bold;">IAprovas</h1></div>
                    <div style="padding: 32px 24px;"><h2 style="color: #1f2937; margin: 0 0 16px 0; font-size: 22px; font-weight: bold;">Pagamento Confirmado!</h2><p style="color: #475569; margin: 0 0 24px 0; font-size: 16px; line-height: 1.5;">Ol√°, {user_nome}, sua jornada para a aprova√ß√£o come√ßou agora!</p><div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 16px; margin-bottom: 24px;"><div style="display: flex; justify-content: space-between; align-items: center; padding-bottom: 8px; border-bottom: 1px solid #e2e8f0;"><span style="color: #64748b;">Plano Contratado:</span><span style="color: #1f2937; font-weight: bold;">{plano_comprado.capitalize()}</span></div><div style="display: flex; justify-content: space-between; align-items: center; padding-top: 8px;"><span style="color: #64748b;">Status:</span><span style="color: #16a34a; font-weight: bold;">‚úÖ Ativo</span></div></div><p style="color: #475569; font-size: 16px;">Com seu plano, voc√™ tem acesso a:</p><ul style="color: #475569; list-style-type: none; padding-left: 0; margin-bottom: 24px;">{lista_html_funcionalidades}</ul><div style="text-align: center;"><a href="{frontend_url}/home.html" style="background-color: #2563eb; color: white; padding: 14px 28px; border-radius: 8px; text-decoration: none; display: inline-block; font-weight: 600;">Acessar Meu Dashboard</a></div></div></div>
                """
                enviar_email(user_email, user_nome, assunto, conteudo_html, "")
        except Exception as e:
            print(f"ERRO CR√çTICO no webhook checkout.session.completed: {e}")
            traceback.print_exc()

    elif event['type'] == 'invoice.payment_failed':
        # FALHA DE PAGAMENTO - Primeira tentativa
        invoice = event['data']['object']
        stripe_customer_id = invoice.get('customer')
        attempt_count = invoice.get('attempt_count', 1)

        try:
            users_ref = db.collection('users')
            query = users_ref.where('stripeCustomerId', '==', stripe_customer_id).limit(1)
            docs = query.stream()

            for doc in docs:
                user_data = doc.to_dict()
                user_email = user_data.get('email')
                user_nome = user_data.get('nome', 'estudante')
                frontend_url = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")

                # EMAIL ESPEC√çFICO para falha de pagamento
                assunto = "üí≥ Problema no pagamento da sua assinatura IAprovas"
                
                conteudo_html = f"""
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff;">
                    <!-- Header laranja para aviso -->
                    <div style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); padding: 32px 24px; text-align: center; border-radius: 12px 12px 0 0;">
                        <div style="background: white; width: 60px; height: 60px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;">
                            <span style="font-size: 24px;">üí≥</span>
                        </div>
                        <h1 style="color: white; margin: 0; font-size: 24px; font-weight: bold;">IAprovas</h1>
                        <p style="color: rgba(255,255,255,0.9); margin: 8px 0 0 0; font-size: 16px;">Problema no pagamento</p>
                    </div>
                    
                    <div style="padding: 40px 24px; background: white;">
                        <div style="text-align: center; margin-bottom: 32px;">
                            <h2 style="color: #1f2937; margin: 0; font-size: 24px; font-weight: bold;">N√£o conseguimos processar seu pagamento</h2>
                            <p style="color: #6b7280; margin: 16px 0 0 0; font-size: 16px;">Ol√°, {user_nome}</p>
                        </div>
                        
                        <!-- Problema identificado -->
                        <div style="background: #fffbeb; border: 1px solid #fed7aa; border-radius: 12px; padding: 20px; margin: 24px 0;">
                            <h3 style="color: #92400e; margin: 0 0 16px 0; font-size: 16px; font-weight: 600;">‚ö†Ô∏è O que aconteceu?</h3>
                            <p style="color: #92400e; margin: 0; font-size: 14px; line-height: 1.5;">
                                Tentamos processar o pagamento da sua assinatura, mas houve um problema:
                            </p>
                            <ul style="color: #92400e; margin: 12px 0 0 0; font-size: 14px; line-height: 1.5;">
                                <li>Cart√£o pode estar vencido ou com dados incorretos</li>
                                <li>Limite do cart√£o pode ter sido excedido</li>
                                <li>Banco pode ter bloqueado a transa√ß√£o</li>
                                <li>Problema tempor√°rio no processamento</li>
                            </ul>
                        </div>

                        <!-- Status atual -->
                        <div style="background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 12px; padding: 20px; margin: 24px 0;">
                            <h3 style="color: #0369a1; margin: 0 0 16px 0; font-size: 16px; font-weight: 600;">üîÑ Status da sua conta</h3>
                            <p style="color: #0369a1; margin: 0; font-size: 14px; line-height: 1.5;">
                                <strong>Seu acesso ainda est√° ativo!</strong> Tentaremos novamente nos pr√≥ximos dias.
                            </p>
                        </div>
                        
                        <!-- A√ß√£o necess√°ria -->
                        <div style="text-align: center; margin: 32px 0;">
                            <a href="{frontend_url}/meu-perfil.html" style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); color: white; padding: 16px 32px; border-radius: 12px; text-decoration: none; display: inline-block; font-weight: 600; font-size: 16px; box-shadow: 0 4px 15px rgba(29, 78, 216, 0.3);">
                                üí≥ Atualizar Forma de Pagamento
                            </a>
                        </div>
                    </div>
                    
                    <div style="background: #f8fafc; padding: 24px; text-align: center; border-radius: 0 0 12px 12px; border-top: 1px solid #e2e8f0;">
                        <p style="color: #6b7280; margin: 0; font-size: 14px;">
                            IAprovas - <a href="mailto:contato@iaprovas.com.br" style="color: #1d4ed8;">contato@iaprovas.com.br</a>
                        </p>
                    </div>
                </div>
                """
                
                conteudo_texto = f"""
                üí≥ PROBLEMA NO PAGAMENTO - IAprovas

                Ol√°, {user_nome}!

                N√£o conseguimos processar o pagamento da sua assinatura.

                POSS√çVEIS MOTIVOS:
                - Cart√£o vencido ou dados incorretos
                - Limite do cart√£o excedido  
                - Banco bloqueou a transa√ß√£o
                - Problema tempor√°rio no processamento

                SUA CONTA:
                - Status: AINDA ATIVA
                - Tentaremos novamente automaticamente
                - Atualize seus dados para evitar problemas

                A√á√ÉO NECESS√ÅRIA:
                1. Acesse: {frontend_url}/meu-perfil.html
                2. Atualize forma de pagamento
                3. Verifique dados do cart√£o

                Equipe IAprovas
                """
                
                enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)
                break
        except Exception as e:
            print(f"Erro no webhook invoice.payment_failed: {e}")

    elif event['type'] == 'customer.subscription.updated':
        subscription = event.data.object
        previous_attributes = event.data.get('previous_attributes', {})
        stripe_customer_id = subscription.get('customer')
        
        user_query = db.collection('users').where('stripeCustomerId', '==', stripe_customer_id).limit(1)
        docs = list(user_query.stream())
        if not docs: return 'Success', 200
        user_doc = docs[0]
        user_data = user_doc.to_dict()
        user_email = user_data.get('email')
        user_nome = user_data.get('nome', 'estudante')

        # Cen√°rio 1: O usu√°rio cancelou a assinatura
        if subscription.get('cancel_at_period_end') and not previous_attributes.get('cancel_at_period_end'):
            cancel_timestamp = subscription.get('cancel_at')
            cancel_date = datetime.fromtimestamp(cancel_timestamp - 1, tz=timezone.utc)

            if user_data.get('assinaturaStatus') != 'cancelada':
                user_doc.reference.update({'assinaturaStatus': 'cancelada', 'dataFimAcesso': cancel_date})
            
            for doc in docs:
                user_data = doc.to_dict()
                if user_data.get('assinaturaStatus') != 'cancelada':
                    doc.reference.update({
                        'assinaturaStatus': 'cancelada',
                        'dataFimAcesso': cancel_date
                    })
                
                user_email = user_data.get('email')
                user_nome = user_data.get('nome', 'estudante')
                plano_cancelado = user_data.get('plano', 'Premium')
                data_formatada_br = format_date(cancel_date, "d 'de' MMMM 'de' yyyy", locale='pt_BR')
                assunto = "üòî Vimos que voc√™ cancelou sua assinatura IAprovas"
                frontend_url = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")

                # Template de e-mail profissional
                conteudo_html = f"""
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;">
                    <div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;">
                        <h1 style="color: white; margin: 0; font-size: 24px; font-weight: bold;">IAprovas</h1>
                    </div>
                    <div style="padding: 32px 24px;">
                        <h2 style="color: #1f2937; margin: 0 0 16px 0; font-size: 22px; font-weight: bold;">Sua assinatura foi cancelada</h2>
                        <p style="color: #475569; margin: 0 0 24px 0; font-size: 16px; line-height: 1.5;">Ol√°, {user_nome}, este √© um e-mail para confirmar que o cancelamento da sua assinatura do plano <strong>{plano_cancelado.capitalize()}</strong> foi agendado.</p>
                        <div style="background: #f1f5f9; border-radius: 8px; padding: 16px; margin-bottom: 24px; text-align: center;">
                            <p style="color: #475569; margin: 0 0 4px 0;">Seu acesso continua ativo at√©:</p>
                            <p style="color: #1f2937; font-weight: bold; font-size: 18px; margin: 0;">{data_formatada_br}</p>
                        </div>
                        <p style="color: #475569; font-size: 16px;">Seus dados e cronogramas ser√£o mantidos caso decida voltar. Se o cancelamento foi um engano ou se voc√™ mudar de ideia, √© f√°cil reativar.</p>
                        <div style="text-align: center; margin-top: 32px;">
                            <a href="{frontend_url}/meu-perfil.html" style="background-color: #16a34a; color: white; padding: 14px 28px; border-radius: 8px; text-decoration: none; display: inline-block; font-weight: 600;">Reativar minha assinatura</a>
                        </div>
                    </div>
                </div>
                """
                conteudo_texto = f"Ol√°, {user_nome}. Confirmamos o cancelamento da sua assinatura {plano_cancelado.capitalize()}. Seu acesso continua at√© {data_formatada_br}."
                
                enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)
                print(f"E-mail de cancelamento enviado e Firestore atualizado para o usu√°rio {doc.id}.")
                break
        
        # Cen√°rio 2: O usu√°rio REATIVOU a assinatura (desistiu do cancelamento)
        elif not subscription.get('cancel_at_period_end') and previous_attributes.get('cancel_at_period_end'):
            user_doc.reference.update({
                'assinaturaStatus': 'ativa',
                'dataFimAcesso': firestore.DELETE_FIELD
            })

            plano_reativado = user_data.get('plano', 'Premium')
            assunto = f"‚úÖ Sua assinatura do plano {plano_reativado.capitalize()} foi reativada!"
            conteudo_html = f"""
            <div style="font-family: sans-serif; max-width: 600px; margin: auto; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;">
                <div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;"><h1 style="color: white; margin: 0;">IAprovas</h1></div>
                <div style="padding: 32px 24px;">
                    <h2 style="margin: 0 0 16px 0;">Assinatura Reativada!</h2>
                    <p>Ol√°, {user_nome},</p>
                    <p>Confirmamos que sua assinatura do plano <strong>{plano_reativado.capitalize()}</strong> foi reativada com sucesso. A cobran√ßa continuar√° normalmente no pr√≥ximo ciclo.</p>
                    <p>Ficamos felizes em ter voc√™ de volta!</p>
                </div>
            </div>
            """
            enviar_email(user_email, user_nome, assunto, conteudo_html, "")
            print(f"Assinatura do usu√°rio {user_doc.id} foi reativada.")

        # Cen√°rio 3: O usu√°rio mudou de plano (upgrade/downgrade)
        elif 'items' in previous_attributes:
            try:
                price_id = subscription['items']['data'][0]['price']['id']
                
                price_ids_reverso = {
                    'price_1Rw2qDI6qNljWf7uvyv6bAU3': 'basico',
                    'price_1Rw2qnI6qNljWf7ux393MN2y': 'intermediario',
                    'price_1Rw2rDI6qNljWf7uWnPUO5Nj': 'premium',
                    'price_1Rw2rpI6qNljWf7uLqUuOjKb': 'anual',
                }
                
                # price_ids_reverso = {
                #     'price_1RbARyI6qNljWf7uGw17462K': 'basico',
                #     'price_1RbAoGI6qNljWf7ukTkebZgt': 'intermediario',
                #     'price_1RbAoWI6qNljWf7uMd3PI1bh': 'premium',
                #     'price_1RbAokI6qNljWf7uFlJ9UusN': 'anual',
                # }
                novo_plano = price_ids_reverso.get(price_id, 'premium')

                users_ref = db.collection('users')
                query = users_ref.where('stripeCustomerId', '==', stripe_customer_id).limit(1)
                docs = query.stream()

                for doc in docs:
                    # Atualiza o plano no Firestore
                    doc.reference.update({'plano': novo_plano})
                    
                    user_data = doc.to_dict()
                    user_email = user_data.get('email')
                    user_nome = user_data.get('nome', 'estudante')

                    # Envia e-mail de confirma√ß√£o da altera√ß√£o de plano
                    assunto = f"‚úÖ Seu plano IAprovas foi atualizado para {novo_plano.capitalize()}!"
                    conteudo_html = f"""
                    <div style="font-family: sans-serif; max-width: 600px; margin: auto; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;">
                        <div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;"><h1 style="color: white; margin: 0;">IAprovas</h1></div>
                        <div style="padding: 32px 24px;">
                            <h2 style="margin: 0 0 16px 0;">Plano Atualizado</h2>
                            <p>Ol√°, {user_nome},</p>
                            <p>Confirmamos que sua assinatura foi alterada com sucesso para o plano <strong>{novo_plano.capitalize()}</strong>.</p>
                            <p>Os novos benef√≠cios j√° est√£o dispon√≠veis na sua conta. A cobran√ßa ser√° ajustada na sua pr√≥xima fatura.</p>
                        </div>
                    </div>
                    """
                    conteudo_texto = f"Ol√°, {user_nome}. Seu plano foi alterado para {novo_plano.capitalize()}."
                    enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)
                    print(f"Plano do usu√°rio {doc.id} atualizado para '{novo_plano}'.")
                    break
            except Exception as e:
                print(f"ERRO ao processar atualiza√ß√£o de plano: {e}")

    elif event['type'] == 'customer.subscription.deleted':
        subscription = event['data']['object']
        stripe_customer_id = subscription.get('customer')

        try:
            # Encontra o usu√°rio pelo stripeCustomerId
            users_ref = db.collection('users')
            query = users_ref.where('stripeCustomerId', '==', stripe_customer_id).limit(1)
            docs = query.stream()

            for doc in docs:
                user_data = doc.to_dict()
                user_email = user_data.get('email')
                user_nome = user_data.get('nome', 'estudante')
                plano_antigo = user_data.get('plano', 'pago')


                # Desativa a conta no Firestore
                doc.reference.update({
                    'plano': 'trial',
                    'assinaturaStatus': 'expirada',
                    'assinaturaCancelada': True,
                    'dataCancelamento': firestore.SERVER_TIMESTAMP
                })

                # EMAIL ESPEC√çFICO para cancelamento definitivo
                frontend_url = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")
                assunto = "üòî Sua assinatura IAprovas foi cancelada"
                
                conteudo_html = f"""
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff;">
                    <!-- Header -->
                    <div style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); padding: 32px 24px; text-align: center; border-radius: 12px 12px 0 0;">
                        <div style="background: white; width: 60px; height: 60px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;">
                            <span style="font-size: 24px;">‚ö†Ô∏è</span>
                        </div>
                        <h1 style="color: white; margin: 0; font-size: 24px; font-weight: bold;">IAprovas</h1>
                        <p style="color: rgba(255,255,255,0.9); margin: 8px 0 0 0; font-size: 16px;">Assinatura cancelada</p>
                    </div>
                    
                    <!-- Conte√∫do -->
                    <div style="padding: 40px 24px; background: white;">
                        <div style="text-align: center; margin-bottom: 32px;">
                            <h2 style="color: #1f2937; margin: 0; font-size: 24px; font-weight: bold;">Assinatura Cancelada</h2>
                            <p style="color: #6b7280; margin: 16px 0 0 0; font-size: 16px;">Ol√°, {user_nome}</p>
                        </div>
                        
                        <!-- Motivos poss√≠veis -->
                        <div style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 12px; padding: 20px; margin: 24px 0;">
                                                         <h3 style="color: #dc2626; margin: 0 0 16px 0; font-size: 16px; font-weight: 600;">üìã O que aconteceu?</h3>
                             <p style="color: #dc2626; margin: 0; font-size: 14px; line-height: 1.5;">
                                Sua assinatura do plano <strong>{plano_antigo.capitalize()}</strong> foi <strong>cancelada definitivamente</strong>. Isso ocorreu por:
                            </p>
                             <ul style="color: #dc2626; margin: 12px 0 0 0; font-size: 14px; line-height: 1.5;">
                                 <li>M√∫ltiplas tentativas de cobran√ßa falharam</li>
                                 <li>Cancelamento solicitado pelo usu√°rio</li>
                                 <li>Problemas persistentes com forma de pagamento</li>
                                 <li>Solicita√ß√£o via suporte ao cliente</li>
                             </ul>
                        </div>
                        
                        <!-- Status atual -->
                        <div style="background: #fffbeb; border: 1px solid #fed7aa; border-radius: 12px; padding: 20px; margin: 24px 0;">
                            <h3 style="color: #92400e; margin: 0 0 16px 0; font-size: 16px; font-weight: 600;">üîí Status da sua conta</h3>
                            <p style="color: #92400e; margin: 0; font-size: 14px; line-height: 1.5;">
                                <strong>Acesso {plano_antigo.capitalize()} removido:</strong> Voc√™ retornou ao plano trial com funcionalidades limitadas.
                            </p>
                        </div>
                        
                        <!-- Reativar -->
                        <div style="text-align: center; margin: 32px 0;">
                            <a href="{frontend_url}/index.html#planos" style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); color: white; padding: 16px 32px; border-radius: 12px; text-decoration: none; display: inline-block; font-weight: 600; font-size: 16px; box-shadow: 0 4px 15px rgba(29, 78, 216, 0.3);">
                                üîÑ Reativar Assinatura
                            </a>
                        </div>
                        
                        <!-- Suporte -->
                        <div style="background: #eff6ff; border: 1px solid #bfdbfe; border-radius: 12px; padding: 20px; margin: 24px 0;">
                            <h4 style="color: #1d4ed8; margin: 0 0 12px 0; font-size: 16px; font-weight: 600;">üí¨ Precisa de ajuda?</h4>
                            <p style="color: #1e40af; margin: 0 0 12px 0; font-size: 14px; line-height: 1.5;">
                                Se o cancelamento foi por engano ou voc√™ precisa de assist√™ncia:
                            </p>
                            <a href="mailto:contato@iaprovas.com.br?subject=Problema com cancelamento da assinatura" style="color: #1d4ed8; text-decoration: none; font-size: 14px; font-weight: 500;">
                                üìß Entre em contato conosco
                            </a>
                        </div>
                    </div>
                    
                    <!-- Footer -->
                    <div style="background: #f8fafc; padding: 24px; text-align: center; border-radius: 0 0 12px 12px; border-top: 1px solid #e2e8f0;">
                        <p style="color: #6b7280; margin: 0; font-size: 14px;">
                            IAprovas - Sua aprova√ß√£o com Intelig√™ncia Artificial<br>
                            <a href="mailto:contato@iaprovas.com.br" style="color: #1d4ed8;">contato@iaprovas.com.br</a>
                        </p>
                    </div>
                </div>
                """
                
                conteudo_texto = f"""
                 üòî ASSINATURA CANCELADA - IAprovas
 
                 Ol√°, {user_nome}!
 
                 Sua assinatura do IAprovas foi cancelada definitivamente.
 
                 O QUE ACONTECEU?
                 Isso ocorreu por:
                 - M√∫ltiplas tentativas de cobran√ßa falharam
                 - Cancelamento solicitado pelo usu√°rio
                 - Problemas persistentes com forma de pagamento
                 - Solicita√ß√£o via suporte ao cliente

                STATUS DA SUA CONTA:
                - Acesso premium: REMOVIDO
                - Plano atual: Trial (funcionalidades limitadas)
                - Dados salvos: Preservados

                PARA REATIVAR:
                1. Acesse: {frontend_url}/index.html#planos
                2. Escolha seu plano
                3. Complete o pagamento
                4. Acesso ser√° restaurado automaticamente

                PRECISA DE AJUDA?
                Se o cancelamento foi por engano ou h√° problemas com pagamento:
                üìß contato@iaprovas.com.br

                Equipe IAprovas
                """
                enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)
                break # Para ap√≥s encontrar o usu√°rio
        except Exception as e:
            print(f"Erro no webhook customer.subscription.deleted: {e}")

    elif event['type'] == 'invoice.payment_succeeded':
        invoice = event['data']['object']
        stripe_customer_id = invoice.get('customer')
        
        # Ignora o primeiro pagamento, que j√° √© tratado pelo 'checkout.session.completed'
        if invoice.get('billing_reason') == 'subscription_cycle':
            users_ref = db.collection('users')
            query = users_ref.where('stripeCustomerId', '==', stripe_customer_id).limit(1)
            docs = query.stream()

            for doc in docs:
                user_data = doc.to_dict()
                user_email = user_data.get('email')
                user_nome = user_data.get('nome', 'estudante')
                plano = user_data.get('plano', '')

                assunto = f"‚úÖ Sua assinatura do IAprovas foi renovada!"
                conteudo_html = f"""
                <p>Ol√°, {user_nome},</p>
                <p>Confirmamos a renova√ß√£o mensal da sua assinatura do plano <strong>{plano.capitalize()}</strong>.</p>
                <p>Seu acesso continua normal. Agradecemos por continuar conosco!</p>
                <p>Bons estudos!</p>
                """
                conteudo_texto = f"Ol√°, {user_nome}. Sua assinatura do plano {plano.capitalize()} foi renovada com sucesso."
                
                enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)
                print(f"Renova√ß√£o de assinatura processada para {doc.id}.")
                break
    
    elif event['type'] == 'invoice.payment_succeeded':
        invoice = event['data']['object']
        if invoice.get('billing_reason') == 'subscription_cycle':
            stripe_customer_id = invoice.get('customer')

    elif event['type'] == 'customer.updated':
        previous_attributes = event.data.get('previous_attributes', {})
        if any(key in previous_attributes for key in ['address', 'name', 'phone']):
            stripe_customer_id = event.data.object.get('id')
            user_query = db.collection('users').where('stripeCustomerId', '==', stripe_customer_id).limit(1)
            docs = list(user_query.stream())
            if not docs: return 'Success', 200
            user_doc = docs[0]
            user_data = user_doc.to_dict()
            user_email = user_data.get('email')
            user_nome = user_data.get('nome', 'estudante')
            assunto = "Seus dados de faturamento foram atualizados"
            conteudo_html = f"""
            <div style="font-family: sans-serif; max-width: 600px; margin: auto; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;"><div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;"><h1 style="color: white; margin: 0;">IAprovas</h1></div><div style="padding: 32px 24px;"><h2 style="margin: 0 0 16px 0;">Dados de Faturamento Atualizados</h2><p>Ol√°, {user_nome},</p><p>Confirmamos que seus dados de faturamento (como nome ou endere√ßo) foram atualizados.</p><p>Se voc√™ n√£o reconhece esta altera√ß√£o, por favor, contate nosso suporte.</p></div></div>
            """
            enviar_email(user_email, user_nome, assunto, conteudo_html, "")
            print(f"E-mail de atualiza√ß√£o de dados de faturamento enviado para {user_doc.id}.")
    
    # NOVO EVENTO: M√âTODO DE PAGAMENTO ATUALIZADO (EX: NOVO CART√ÉO)
    elif event['type'] == 'payment_method.attached':
        stripe_customer_id = event.data.object.get('customer')
        user_query = db.collection('users').where('stripeCustomerId', '==', stripe_customer_id).limit(1)
        docs = list(user_query.stream())
        if not docs: return 'Success', 200
        user_doc = docs[0]
        user_data = user_doc.to_dict()
        user_email = user_data.get('email')
        user_nome = user_data.get('nome', 'estudante')
        assunto = "Seu m√©todo de pagamento foi atualizado"
        conteudo_html = f"""
        <div style="font-family: sans-serif; max-width: 600px; margin: auto; border: 1px solid #e2e8f0; border-radius: 12px; overflow: hidden;"><div style="background: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%); padding: 24px; text-align: center;"><h1 style="color: white; margin: 0;">IAprovas</h1></div><div style="padding: 32px 24px;"><h2 style="margin: 0 0 16px 0;">M√©todo de Pagamento Atualizado</h2><p>Ol√°, {user_nome},</p><p>Confirmamos que um novo m√©todo de pagamento foi adicionado √† sua conta IAprovas.</p><p>Se voc√™ realizou esta altera√ß√£o, est√° tudo certo. Caso n√£o reconhe√ßa esta atividade, por favor, entre em contato com nosso suporte.</p></div></div>
        """
        enviar_email(user_email, user_nome, assunto, conteudo_html, "")
        print(f"E-mail de atualiza√ß√£o de m√©todo de pagamento enviado para {user_doc.id}.")


    return 'Success', 200

@app.route('/create-portal-session', methods=['POST'])
def create_portal_session():
    data = request.get_json()
    user_id = data.get('userId')

    if not user_id:
        return jsonify(error={'message': 'ID do usu√°rio n√£o fornecido.'}), 400

    try:
        # Busca o usu√°rio no Firestore para pegar o stripeCustomerId
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()
        if not user_doc.exists:
            return jsonify(error={'message': 'Usu√°rio n√£o encontrado.'}), 404

        stripe_customer_id = user_doc.to_dict().get('stripeCustomerId')
        if not stripe_customer_id:
            return jsonify(error={'message': 'ID de cliente Stripe n√£o encontrado para este usu√°rio.'}), 400
        
        YOUR_DOMAIN = os.getenv("FRONTEND_URL", "http://127.0.0.1:5500")

        portal_session = stripe.billing_portal.Session.create(
            customer=stripe_customer_id,
            return_url=YOUR_DOMAIN + '/meu-perfil.html',
        )
        return jsonify({'url': portal_session.url})

    except Exception as e:
        print(f"Erro ao criar sess√£o do portal: {e}")
        return jsonify(error={'message': 'Falha ao criar sess√£o do portal.'}), 500


@app.route('/delete-user-account', methods=['POST'])
@cross_origin(supports_credentials=True)
def delete_user_account():
    data = request.get_json()
    user_id = data.get('userId')
    if not user_id:
        return jsonify(error={'message': 'ID do usu√°rio n√£o fornecido.'}), 400

    try:
        # Passo 1: Obter dados do usu√°rio ANTES de deletar
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()

        if not user_doc.exists:
            # Se o usu√°rio n√£o est√° no Firestore, pode ser um erro ou um estado inconsistente.
            # Mesmo assim, tentaremos delet√°-lo da autentica√ß√£o para garantir a limpeza.
            try:
                firebase_auth.delete_user(user_id)
                print(f"Usu√°rio {user_id} n√£o encontrado no Firestore, mas removido da Autentica√ß√£o.")
                return jsonify(success=True, message="Conta de autentica√ß√£o √≥rf√£ foi exclu√≠da.")
            except firebase_auth.UserNotFoundError:
                # Se ele tamb√©m n√£o est√° no Auth, ent√£o n√£o h√° nada a fazer.
                return jsonify(error={'message': 'Usu√°rio n√£o encontrado em nenhum sistema.'}), 404

        user_data = user_doc.to_dict()
        user_email = user_data.get('email')
        user_nome = user_data.get('nome', 'Ex-usu√°rio')

        # --- NOVA L√ìGICA DE EXCLUS√ÉO ---
        # Passo 2: Deletar do Firebase Authentication PRIMEIRO. Esta √© a etapa mais cr√≠tica.
        print(f"Tentando excluir o usu√°rio {user_id} do Firebase Auth...")
        firebase_auth.delete_user(user_id)
        print(f"Usu√°rio {user_id} exclu√≠do do Firebase Auth com sucesso.")

        # Passo 3: Se a exclus√£o do Auth funcionou, deletar do Firestore.
        print(f"Excluindo documento do usu√°rio {user_id} do Firestore...")
        user_ref.delete()
        print("Documento do Firestore exclu√≠do com sucesso.")

        # Passo 4: Se TUDO deu certo, enviar o e-mail de confirma√ß√£o.
        if user_email:
            assunto = "Sua conta na IAprovas foi exclu√≠da"
            conteudo_html = f"<p>Ol√°, {user_nome},</p><p>Confirmamos que sua conta e todos os seus dados na plataforma IAprovas foram permanentemente exclu√≠dos, conforme sua solicita√ß√£o.</p><p>Agradecemos pelo tempo que esteve conosco.</p>"
            conteudo_texto = "Sua conta na IAprovas foi exclu√≠da com sucesso."
            enviar_email(user_email, user_nome, assunto, conteudo_html, conteudo_texto)

        return jsonify(success=True, message="Conta e dados exclu√≠dos com sucesso.")

    except firebase_auth.UserNotFoundError:
        # Este erro pode acontecer se, por algum motivo, o usu√°rio j√° foi deletado do Auth
        # mas ainda existe no Firestore. O c√≥digo tentar√° limpar o Firestore.
        print(f"AVISO: Usu√°rio {user_id} n√£o foi encontrado na Autentica√ß√£o, mas o documento do Firestore existe. Limpando o documento.")
        db.collection('users').document(user_id).delete()
        return jsonify(error={'message': 'Usu√°rio n√£o encontrado na autentica√ß√£o, mas os dados foram limpos.'}), 404
    
    except Exception as e:
        # Se qualquer outra exce√ß√£o ocorrer (ex: permiss√£o negada para excluir do Auth),
        # ela ser√° capturada aqui, e o e-mail de sucesso N√ÉO ser√° enviado.
        print(f"ERRO CR√çTICO ao excluir a conta {user_id}:")
        traceback.print_exc()
        return jsonify(error={'message': 'Ocorreu um erro interno ao excluir a conta.'}), 500


@app.route("/get-usage-limits/<user_id>", methods=['GET'])
@cross_origin(supports_credentials=True)
def get_usage_limits(user_id):
    try:
        # Usa hor√°rio de Bras√≠lia (UTC-3) para reset √† meia-noite
        brasilia_tz = timezone(timedelta(hours=-3))
        today_str = datetime.now(brasilia_tz).strftime('%Y-%m-%d')
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()

        if not user_doc.exists:
            return jsonify({"error": "Usu√°rio n√£o encontrado."}), 404

        user_plan = user_doc.to_dict().get('plano', 'trial')
        
        usage_doc_ref = user_ref.collection('usage').document('total_trial' if user_plan == 'trial' else today_str)
        usage_doc = usage_doc_ref.get()

        current_usage = usage_doc.to_dict() if usage_doc.exists else {}
        plan_limits = PLAN_LIMITS.get(user_plan, {})

        return jsonify({
            "usage": current_usage,
            "limits": plan_limits,
            "plan": user_plan # <-- Adicionado para o frontend saber o plano
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# --- FUN√á√ÉO DE BACKGROUND PARA GERAR FLASHCARDS ---

def processar_flashcards_em_background(user_id, deck_id, dados_req):
    """Gera flashcards via OpenAI em segundo plano e grava no Firestore."""
    print(f"BACKGROUND (FLASHCARDS) deck {deck_id} para usu√°rio {user_id}")
    deck_ref = db.collection('users').document(user_id).collection('flashcards').document(deck_id)
    try:
        materia = dados_req.get('materia')
        topico = dados_req.get('topico')
        quantidade = int(dados_req.get('quantidade', 10))
        formato = dados_req.get('formato', 'pergunta_resposta')

        prompt = (
            "Voc√™ √© um professor especialista em criar flashcards para concursos. \n"
            f"Crie {quantidade} flashcards no formato {formato} sobre {materia} ‚Äì t√≥pico {topico}.\n"
            "Sa√≠da obrigat√≥ria em JSON com a chave 'flashcards': lista de objetos {frente, verso}.\n"
        )
        system_msg = "Gere flashcards curtos e diretos; retorne somente JSON v√°lido."

        resultado = call_openai_api(prompt, system_msg)
        if 'flashcards' not in resultado or not isinstance(resultado['flashcards'], list):
            raise ValueError("Resposta da IA sem lista de flashcards")

        flashcards = resultado['flashcards']

        batch = db.batch()
        for card in flashcards:
            card_ref = deck_ref.collection('cards').document()
            batch.set(card_ref, {
                'frente': card.get('frente'),
                'verso': card.get('verso'),
                'createdAt': firestore.SERVER_TIMESTAMP,
                # Cart√µes novos N√ÉO devem ter nextReview definido
                # nextReview ser√° definido apenas quando o cart√£o for estudado pela primeira vez
                'interval': 0,
                'ease': 2.5,
                'reps': 0,
                'lapses': 0
            })
        batch.update(deck_ref, {
            'status': 'completed',
            'cardCount': len(flashcards)
        })
        batch.commit()
        print(f"FLASHCARDS GERADOS: deck {deck_id}")
    except Exception as e:
        print(f"!!! ERRO FLASHCARDS deck {deck_id}: {e}")
        traceback.print_exc()
        deck_ref.update({'status': 'failed', 'error': str(e)})

# --- ROTA PARA GERAR FLASHCARDS ---

@app.route('/gerar-flashcards-async', methods=['POST'])
@cross_origin(supports_credentials=True, origins=["https://iaprovas.com.br","https://www.iaprovas.com.br","http://localhost:5500","http://127.0.0.1:5500"])
def gerar_flashcards_async():
    dados_req = request.json
    user_id = dados_req.get('userId')

    is_allowed, message = check_usage_and_update(user_id, 'flashcards')
    if not is_allowed:
        return jsonify({'error': 'limit_exceeded', 'message': message}), 429

    if not user_id:
        return jsonify({'erro': 'ID do usu√°rio n√£o fornecido.'}), 400

    deck_ref = db.collection('users').document(user_id).collection('flashcards').document()
    deck_id = deck_ref.id

    placeholder = {
        'status': 'processing',
        'criadoEm': firestore.SERVER_TIMESTAMP,
        'materia': dados_req.get('materia'),
        'topico': dados_req.get('topico'),
        'geradoPor': 'ia',
        'cardCount': 0,
        'deckId': deck_id
    }
    deck_ref.set(placeholder)

    thr = threading.Thread(target=processar_flashcards_em_background, args=(user_id, deck_id, dados_req))
    thr.start()

    return jsonify({'status': 'processing', 'deckId': deck_id}), 202

# --- UTILIDADE SRS (SM-2) ---

def srs_update(card_doc, quality):
    """Atualiza campos do cart√£o baseado no SM-2. quality: 0-5"""
    ease = card_doc.get('ease', 2.5)
    interval = card_doc.get('interval', 0)
    reps = card_doc.get('reps', 0)
    lapses = card_doc.get('lapses', 0)

    if quality >= 3:
        if reps == 0:
            interval = 1
        elif reps == 1:
            interval = 6
        else:
            interval = round(interval * ease)
        ease = max(1.3, ease + 0.1 - (5 - quality) * 0.08)
        reps += 1
    else:
        reps = 0
        interval = 1
        ease = max(1.3, ease - 0.2)
        lapses += 1

    # Usa hor√°rio de Bras√≠lia para consist√™ncia
    brasilia_tz = timezone(timedelta(hours=-3))
    next_review = datetime.now(brasilia_tz) + timedelta(days=interval)
    return {
        'ease': ease,
        'interval': interval,
        'reps': reps,
        'lapses': lapses,
        'nextReview': next_review
    }

# --- ROTA PARA RESPONDER FLASHCARD ---

@app.route('/responder-flashcard', methods=['POST'])
@cross_origin(supports_credentials=True)
def responder_flashcard():
    dados = request.json
    user_id = dados.get('userId')
    deck_id = dados.get('deckId')
    card_id = dados.get('cardId')
    quality = int(dados.get('quality', 0))

    if not all([user_id, deck_id, card_id]):
        return jsonify({'erro': 'Dados insuficientes.'}), 400

    card_ref = db.collection('users').document(user_id).collection('flashcards').document(deck_id).collection('cards').document(card_id)
    card_doc = card_ref.get().to_dict()
    if not card_doc:
        return jsonify({'erro': 'Card n√£o encontrado'}), 404

    updates = srs_update(card_doc, quality)
    updates['ultimaRevisao'] = firestore.SERVER_TIMESTAMP
    card_ref.update(updates)

    # increment stats in deck
    deck_ref = db.collection('users').document(user_id).collection('flashcards').document(deck_id)
    deck_ref.update({f'stats.q{quality}': firestore.Increment(1)})

    return jsonify({'status': 'updated', 'nextReview': updates['nextReview'].isoformat()})

# --- SISTEMA DE ACOMPANHAMENTO DE PROGRESSO ---

@app.route("/registrar-progresso", methods=['POST'])
@cross_origin(supports_credentials=True)
def registrar_progresso():
    """Registra o progresso de uma sess√£o de estudo."""
    try:
        dados = request.json
        user_id = dados.get('userId')
        plano_id = dados.get('planoId')
        sessao_id = dados.get('sessaoId')
        status = dados.get('status')  # 'completed', 'modified', 'incomplete'
        observacoes = dados.get('observacoes', '')
        tempo_real = dados.get('tempoReal', 0)
        
        if not all([user_id, plano_id, sessao_id, status]):
            return jsonify({"erro": "Dados insuficientes"}), 400
            
        if status not in ['completed', 'modified', 'incomplete']:
            return jsonify({"erro": "Status inv√°lido"}), 400
        
        # Verifica se j√° existe um registro para esta sess√£o
        progresso_existente = db.collection('users').document(user_id).collection('progresso').where('sessaoId', '==', sessao_id).where('planoId', '==', plano_id).limit(1).stream()
        
        progresso_data = {
            'userId': user_id,
            'planoId': plano_id,
            'sessaoId': sessao_id,
            'status': status,
            'observacoes': observacoes,
            'tempoReal': tempo_real,
            'dataRegistro': firestore.SERVER_TIMESTAMP
        }
        
        # Se j√° existe um registro, atualiza ele. Sen√£o, cria um novo
        registros_existentes = list(progresso_existente)
        if registros_existentes:
            # Atualiza o registro existente
            doc_ref = registros_existentes[0].reference
            doc_ref.update(progresso_data)
            progresso_id = doc_ref.id
        else:
            # Cria um novo registro
            progresso_ref = db.collection('users').document(user_id).collection('progresso').document()
            progresso_ref.set(progresso_data)
            progresso_id = progresso_ref.id
        
        return jsonify({"sucesso": True, "progressoId": progresso_id}), 200
        
    except Exception as e:
        print(f"Erro ao registrar progresso: {e}")
        return jsonify({"erro": "Erro interno do servidor"}), 500

@app.route("/obter-progresso/<user_id>/<plano_id>", methods=['GET'])
@cross_origin(supports_credentials=True)
def obter_progresso(user_id, plano_id):
    """Obt√©m o progresso de um plano espec√≠fico."""
    try:
        # Busca todos os registros de progresso do plano
        progresso_refs = db.collection('users').document(user_id).collection('progresso').where('planoId', '==', plano_id).stream()
        
        progresso_lista = []
        sessoes_por_id = {}  # Dicion√°rio para armazenar o √∫ltimo status de cada sess√£o
        
        # Agrupa registros por sess√£o e pega o mais recente
        for doc in progresso_refs:
            data = doc.to_dict()
            data['id'] = doc.id
            sessao_id = data['sessaoId']
            data_registro = data.get('dataRegistro')
            
            # Se n√£o existe registro para esta sess√£o ou se √© mais recente
            if sessao_id not in sessoes_por_id or (data_registro and sessoes_por_id[sessao_id]['dataRegistro'] < data_registro):
                sessoes_por_id[sessao_id] = data
        
        # Retorna apenas o √∫ltimo status de cada sess√£o
        progresso_lista = list(sessoes_por_id.values())
        
        return jsonify({"progresso": progresso_lista}), 200
        
    except Exception as e:
        print(f"Erro ao obter progresso: {e}")
        return jsonify({"erro": "Erro interno do servidor"}), 500

@app.route("/calcular-metricas-progresso/<user_id>/<plano_id>", methods=['GET'])
@cross_origin(supports_credentials=True)
def calcular_metricas_progresso(user_id, plano_id):
    """Calcula m√©tricas de progresso para um plano."""
    try:
        # Busca o plano
        plano_ref = db.collection('users').document(user_id).collection('plans').document(plano_id)
        plano_doc = plano_ref.get()
        
        if not plano_doc.exists:
            return jsonify({"erro": "Plano n√£o encontrado"}), 404
            
        plano_data = plano_doc.to_dict()
        
        # Busca o progresso com limite para evitar timeout
        progresso_refs = db.collection('users').document(user_id).collection('progresso').where('planoId', '==', plano_id).limit(1000).stream()
        
        progresso_lista = []
        for doc in progresso_refs:
            data = doc.to_dict()
            data['id'] = doc.id
            progresso_lista.append(data)
        
        # Calcula m√©tricas de forma otimizada
        total_sessoes = 0
        
        # Conta sess√µes do plano de forma mais eficiente
        if 'cronograma_semanal_detalhado' in plano_data:
            for semana in plano_data['cronograma_semanal_detalhado']:
                for dia in semana.get('dias_de_estudo', []):
                    total_sessoes += len(dia.get('atividades', []))
        
        # Analisa progresso de forma otimizada
        datas_estudo = set()
        sessoes_por_id = {}
        
        # Agrupa registros por sess√£o e pega o mais recente
        for registro in progresso_lista:
            sessao_id = registro['sessaoId']
            data_registro = registro.get('dataRegistro')
            
            if sessao_id not in sessoes_por_id or (data_registro and sessoes_por_id[sessao_id]['dataRegistro'] < data_registro):
                sessoes_por_id[sessao_id] = registro
        
        # Conta status de forma otimizada
        sessoes_completadas = sum(1 for r in sessoes_por_id.values() if r['status'] == 'completed')
        sessoes_modificadas = sum(1 for r in sessoes_por_id.values() if r['status'] == 'modified')
        sessoes_incompletas = sum(1 for r in sessoes_por_id.values() if r['status'] == 'incomplete')
        
        # Coleta datas de forma otimizada
        for registro in sessoes_por_id.values():
            if 'dataRegistro' in registro:
                data_str = registro['dataRegistro'].strftime('%Y-%m-%d')
                datas_estudo.add(data_str)
        
        # Calcula dias consecutivos de forma otimizada
        dias_consecutivos = 1
        if datas_estudo:
            datas_ordenadas = sorted(list(datas_estudo))
            for i in range(1, len(datas_ordenadas)):
                data_anterior = datetime.strptime(datas_ordenadas[i-1], '%Y-%m-%d')
                data_atual = datetime.strptime(datas_ordenadas[i], '%Y-%m-%d')
                if (data_atual - data_anterior).days == 1:
                    dias_consecutivos += 1
                else:
                    dias_consecutivos = 1
        
        # Calcula porcentagem
        porcentagem = (sessoes_completadas / total_sessoes * 100) if total_sessoes > 0 else 0
        
        metricas = {
            'totalSessoes': total_sessoes,
            'sessoesCompletadas': sessoes_completadas,
            'sessoesModificadas': sessoes_modificadas,
            'sessoesIncompletas': sessoes_incompletas,
            'porcentagemConclusao': round(porcentagem, 1),
            'diasConsecutivos': dias_consecutivos,
            'totalDiasEstudo': len(datas_estudo),
            'progresso': list(sessoes_por_id.values())  # Retorna apenas os √∫ltimos status
        }
        
        return jsonify(metricas), 200
        
    except Exception as e:
        print(f"Erro ao calcular m√©tricas: {e}")
        return jsonify({"erro": "Erro interno do servidor"}), 500

# --- ROTAS PARA EXCLUIR E REGENERAR ITENS ---

@app.route("/excluir-item/<user_id>/<collection_name>/<item_id>", methods=['DELETE'])
@cross_origin(supports_credentials=True)
def excluir_item(user_id, collection_name, item_id):
    """Exclui um item espec√≠fico de uma cole√ß√£o do usu√°rio"""
    try:
        # Valida a cole√ß√£o permitida
        colecoes_permitidas = ['plans', 'sessoesExercicios', 'discursivasCorrigidas', 'historicoDicas', 'flashcards']
        if collection_name not in colecoes_permitidas:
            return jsonify({"error": "Cole√ß√£o n√£o permitida"}), 400
        
        # Exclui o item
        item_ref = db.collection('users').document(user_id).collection(collection_name).document(item_id)
        item_doc = item_ref.get()
        
        if not item_doc.exists:
            return jsonify({"error": "Item n√£o encontrado"}), 404
        
        item_ref.delete()
        
        print(f"Item {item_id} exclu√≠do da cole√ß√£o {collection_name} do usu√°rio {user_id}")
        return jsonify({"success": True, "message": "Item exclu√≠do com sucesso"}), 200
        
    except Exception as e:
        print(f"Erro ao excluir item: {e}")
        return jsonify({"error": "Erro interno ao excluir item"}), 500



if __name__ == "__main__":
    import sys
    
    # Verificar se foi passada uma porta como argumento
    port = 5000
    if len(sys.argv) > 1 and sys.argv[1] == '--port':
        if len(sys.argv) > 2:
            port = int(sys.argv[2])
        else:
            print("Erro: --port requer um n√∫mero de porta")
            sys.exit(1)
    else:
        port = int(os.environ.get("PORT", 5000))
    
    print(f"Iniciando servidor Flask na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=True)
