#!/usr/bin/env python3
"""
Script para importar novas quest√µes ao banco de dados
Procedimento automatizado para adicionar quest√µes
"""

import os
import json
import time
import re
from openai import OpenAI
from dotenv import load_dotenv
import firebase_admin
from firebase_admin import credentials, firestore

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Configura√ß√£o Firebase
if not firebase_admin._apps:
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
db = firestore.client()

def clean_enunciado(enunciado):
    """Remove prefixos como [L√çNGUA PORTUGUESA] do in√≠cio do enunciado"""
    return re.sub(r"^\[.*?\]\s*", "", enunciado or "")

def get_embedding(text, model="text-embedding-3-small"):
    """Gera embedding para um texto"""
    try:
        response = client.embeddings.create(
            input=text,
            model=model
        )
        return response.data[0].embedding
    except Exception as e:
        print(f"Erro ao gerar embedding: {e}")
        return None

def identify_materia_topico_with_ai(question):
    """Identifica mat√©ria e t√≥pico usando IA"""
    enunciado = question.get('texto_enunciado', '')
    prompt = f"""
    Analise esta quest√£o de concurso e identifique de forma ESPEC√çFICA:
    1. MAT√âRIA: Deve ser o ramo ESPEC√çFICO da mat√©ria. Exemplos corretos:
       - "Direito Constitucional" (N√ÉO apenas "Direito")
       - "Direito Administrativo" (N√ÉO apenas "Direito")
       - "L√≠ngua Portuguesa" (N√ÉO apenas "Portugu√™s")
       - "Matem√°tica Financeira" (N√ÉO apenas "Matem√°tica")
       - "Economia Monet√°ria" (N√ÉO apenas "Economia")
    2. T√ìPICO: Deve ser o assunto ESPEC√çFICO tratado na quest√£o. Exemplos:
       - "Direitos Fundamentais" (para Direito Constitucional)
       - "Modalidades de Licita√ß√£o" (para Direito Administrativo)
       - "An√°lise Sint√°tica" (para L√≠ngua Portuguesa)
       - "Juros Compostos" (para Matem√°tica Financeira)
    
    QUEST√ÉO: {enunciado}
    
    Responda APENAS no formato JSON:
    {{
        "materia": "Nome espec√≠fico da mat√©ria",
        "topico": "T√≥pico espec√≠fico tratado"
    }}
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            max_tokens=200
        )
        
        result = response.choices[0].message.content.strip()
        # Tenta extrair JSON da resposta
        if result.startswith('{') and result.endswith('}'):
            data = json.loads(result)
            return data.get('materia', 'Geral'), data.get('topico', 'Geral')
        else:
            return 'Geral', 'Geral'
            
    except Exception as e:
        print(f"Erro na IA: {e}")
        return 'Geral', 'Geral'

def identify_question_type(resposta_correta):
    """Identifica o tipo de quest√£o baseado na resposta correta"""
    resposta = resposta_correta.strip().upper()
    
    if resposta in ["A", "B", "C", "D", "E"]:
        return "multipla_escolha"
    elif resposta in ["CERTO", "ERRADO"]:
        return "certo_errado"
    else:
        return "certo_errado"  # Padr√£o para quest√µes de concurso

def process_and_import_questions(input_file, output_file=None):
    """
    Processa e importa quest√µes de um arquivo JSON
    """
    print(f"üîÑ Processando arquivo: {input_file}")
    
    # Carrega quest√µes
    with open(input_file, 'r', encoding='utf-8') as f:
        questions = json.load(f)
    
    print(f"üìä Total de quest√µes encontradas: {len(questions)}")
    
    processed_questions = []
    
    for i, question in enumerate(questions, 1):
        print(f"üîÑ Processando quest√£o {i}/{len(questions)}...")
        
        # Verifica se j√° tem mat√©ria e t√≥pico
        materia = question.get('materia')
        topico = question.get('topico')
        
        # Se n√£o tem ou √© gen√©rico, usa IA
        if not materia or not topico or materia in ["Direito", "Portugu√™s", "Matem√°tica", "Economia"]:
            print(f"   ü§ñ Identificando mat√©ria e t√≥pico com IA...")
            materia, topico = identify_materia_topico_with_ai(question)
            print(f"   ‚úÖ Mat√©ria: {materia}, T√≥pico: {topico}")
        
        # Processa a quest√£o
        processed_question = {
            "texto_enunciado": clean_enunciado(question.get('texto_enunciado', '')),
            "resposta_correta": question.get('resposta_correta', ''),
            "banca": question.get('banca', ''),
            "concurso": question.get('concurso', ''),
            "ano": question.get('ano', ''),
            "materia": materia,
            "topico": topico
        }
        
        processed_questions.append(processed_question)
        
        # Pausa para n√£o sobrecarregar a API
        time.sleep(0.5)
    
    # Salva quest√µes processadas
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(processed_questions, f, ensure_ascii=False, indent=2)
        print(f"üíæ Quest√µes processadas salvas em: {output_file}")
    
    return processed_questions

def import_to_firestore(processed_questions, start_id=None):
    """
    Importa quest√µes processadas para o Firestore
    """
    print(f"üöÄ Importando {len(processed_questions)} quest√µes para o Firestore...")
    
    # Determina ID inicial
    if start_id is None:
        # Busca o √∫ltimo ID no Firestore
        docs = list(db.collection('banco_questoes').stream())
        if docs:
            last_ids = [int(doc.id.split('_')[1]) for doc in docs if doc.id.startswith('questao_')]
            start_id = max(last_ids) + 1 if last_ids else 1
        else:
            start_id = 1
    
    print(f"üìù Iniciando importa√ß√£o a partir do ID: {start_id}")
    
    success_count = 0
    error_count = 0
    
    for i, question in enumerate(processed_questions):
        question_id = start_id + i
        
        print(f"üîÑ Importando quest√£o {question_id}...")
        
        try:
            # Gera embedding
            enunciado = question.get('texto_enunciado', '')
            embedding = get_embedding(enunciado)
            
            if not embedding:
                print(f"   ‚ùå Erro ao gerar embedding para quest√£o {question_id}")
                error_count += 1
                continue
            
            # Identifica tipo de quest√£o
            tipo_questao = identify_question_type(question.get('resposta_correta', ''))
            
            # Prepara dados para Firestore
            firestore_question = {
                "texto_enunciado": enunciado,
                "opcoes": [],  # Quest√µes de certo/errado n√£o t√™m alternativas
                "resposta_correta": question.get('resposta_correta'),
                "banca": question.get('banca'),
                "concurso_origem": question.get('concurso'),
                "ano": question.get('ano'),
                "tipo_questao": tipo_questao,
                "materia": question.get('materia'),
                "topico": question.get('topico'),
                "embedding": embedding,
                "avaliacoes": {"positivas": 0, "negativas": 0},
                "status_revisao": "aprovado"
            }
            
            # Salva no Firestore
            doc_id = f"questao_{question_id:04d}"
            db.collection('banco_questoes').document(doc_id).set(firestore_question)
            
            print(f"   ‚úÖ Quest√£o {question_id} importada com sucesso!")
            print(f"      Mat√©ria: {question.get('materia')}")
            print(f"      T√≥pico: {question.get('topico')}")
            print(f"      Tipo: {tipo_questao}")
            
            success_count += 1
            
            # Pausa para n√£o sobrecarregar
            time.sleep(0.1)
            
        except Exception as e:
            print(f"   ‚ùå Erro ao importar quest√£o {question_id}: {e}")
            error_count += 1
    
    print(f"\nüéâ Importa√ß√£o conclu√≠da!")
    print(f"‚úÖ Sucessos: {success_count}")
    print(f"‚ùå Erros: {error_count}")
    
    return success_count, error_count

def main():
    """
    Fun√ß√£o principal para importar novas quest√µes
    """
    print("üöÄ IMPORTADOR DE NOVAS QUEST√ïES")
    print("=" * 50)
    
    # Verifica se o arquivo de entrada existe
    input_file = input("üìÅ Digite o nome do arquivo JSON com as quest√µes: ").strip()
    
    if not os.path.exists(input_file):
        print(f"‚ùå Arquivo '{input_file}' n√£o encontrado!")
        return
    
    # Pergunta se quer processar com IA
    use_ai = input("ü§ñ Usar IA para identificar mat√©ria e t√≥pico? (s/n): ").strip().lower() == 's'
    
    if use_ai:
        print("üîÑ Processando quest√µes com IA...")
        processed_questions = process_and_import_questions(input_file, "questoes_processadas_novas.json")
    else:
        # Carrega quest√µes sem processamento adicional
        with open(input_file, 'r', encoding='utf-8') as f:
            questions = json.load(f)
        
        processed_questions = []
        for question in questions:
            processed_question = {
                "texto_enunciado": clean_enunciado(question.get('texto_enunciado', '')),
                "resposta_correta": question.get('resposta_correta', ''),
                "banca": question.get('banca', ''),
                "concurso": question.get('concurso', ''),
                "ano": question.get('ano', ''),
                "materia": question.get('materia', 'Geral'),
                "topico": question.get('topico', 'Geral')
            }
            processed_questions.append(processed_question)
    
    # Pergunta se quer importar para Firestore
    import_to_db = input("üî• Importar para o Firestore? (s/n): ").strip().lower() == 's'
    
    if import_to_db:
        start_id = input("üìù ID inicial para importa√ß√£o (deixe vazio para auto): ").strip()
        start_id = int(start_id) if start_id.isdigit() else None
        
        import_to_firestore(processed_questions, start_id)
    
    print("\n‚úÖ Processo conclu√≠do!")

if __name__ == "__main__":
    main() 